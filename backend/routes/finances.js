// backend/routes/finances.js - –û–ë–ù–û–í–õ–ï–ù –î–õ–Ø –ü–û–î–î–ï–†–ñ–ö–ò TRANSFER –û–ü–ï–†–ê–¶–ò–ô
const express = require('express');
const router = express.Router();
const pool = require('../database');
const { requireRole } = require('../middleware/auth');

console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è routes/finances.js');

router.use((req, res, next) => {
  console.log('üîç FINANCES ROUTER DEBUG:', {
    method: req.method,
    originalUrl: req.originalUrl,
    url: req.url,
    path: req.path,
    query: req.query,
    headers: req.headers,
    timestamp: new Date().toISOString()
  });
  next();
});

// üÜï –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const {
  validateFinance,
  validateTransferPair,
  validateIdParam,
  validateClientIdParam
} = require('../middleware/validation');

const {
  asyncHandler,
  NotFoundError,
  BusinessLogicError
} = require('../middleware/errorHandler');

/**
 * @swagger
 * /api/finances:
 *   get:
 *     tags: [Finances]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É, –¥–∞—Ç–∞–º –∏ –ø–æ–∏—Å–∫—É
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - name: search
 *         in: query
 *         description: –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–∏
 *         schema:
 *           type: string
 *         example: –æ–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞
 *       - name: status
 *         in: query
 *         description: –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 *         schema:
 *           type: string
 *           enum: [actual, planned]
 *         example: actual
 *       - $ref: '#/components/parameters/DateFromParam'
 *       - $ref: '#/components/parameters/DateToParam'
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/FinanceListResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 *   post:
 *     tags: [Finances]
 *     summary: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 *     description: –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–¥–æ—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥)
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/FinanceCreateRequest'
 *     responses:
 *       201:
 *         description: –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/FinanceResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –ö–ª–∏–µ–Ω—Ç –∏–ª–∏ –∫–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/CashDeskNotFoundError'
 *       409:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/InsufficientFundsError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/finances/{id}:
 *   get:
 *     tags: [Finances]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ ID
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *     responses:
 *       200:
 *         description: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/FinanceResponse'
 *       400:
 *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 *   put:
 *     tags: [Finances]
 *     summary: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 *     description: –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/FinanceUpdateRequest'
 *     responses:
 *       200:
 *         description: –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/FinanceResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 *   delete:
 *     tags: [Finances]
 *     summary: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 *     description: –£–¥–∞–ª—è–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *     responses:
 *       200:
 *         description: –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞
 *       400:
 *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/finances/transfer:
 *   post:
 *     tags: [Finances]
 *     summary: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏
 *     description: –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/TransferPairRequest'
 *     responses:
 *       201:
 *         description: –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TransferPairResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –û–¥–Ω–∞ –∏–∑ –∫–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/CashDeskNotFoundError'
 *       409:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞—Å—Å–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∫–∞—Å—Å–∞–º–∏
 *         content:
 *           application/json:
 *             schema:
 *               oneOf:
 *                 - $ref: '#/components/schemas/InsufficientFundsError'
 *                 - $ref: '#/components/schemas/InvalidTransferError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/finances/summary/stats:
 *   get:
 *     tags: [Finances]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ—Ö–æ–¥–∞–º, —Ä–∞—Å—Ö–æ–¥–∞–º –∏ –±–∞–ª–∞–Ω—Å—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/DateFromParam'
 *       - $ref: '#/components/parameters/DateToParam'
 *     responses:
 *       200:
 *         description: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/FinanceSummaryResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞—Ç—ã
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/finances/client/{clientId}:
 *   get:
 *     tags: [Finances]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–ª–∏–µ–Ω—Ç—É
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/ClientIdParam'
 *     responses:
 *       200:
 *         description: –û–ø–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/FinanceListResponse'
 *       400:
 *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/finances/export/statement:
 *   get:
 *     tags: [Finances]
 *     summary: –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≤—ã–ø–∏—Å–∫–∏
 *     description: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≤—ã–ø–∏—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –¥–æ—Ö–æ–¥–∞–º, —Ä–∞—Å—Ö–æ–¥–∞–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/DateFromParam'
 *       - $ref: '#/components/parameters/DateToParam'
 *       - name: format
 *         in: query
 *         description: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
 *         schema:
 *           type: string
 *           enum: [csv]
 *           default: csv
 *     responses:
 *       200:
 *         description: –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≤—ã–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
 *         content:
 *           text/csv:
 *             schema:
 *               type: string
 *               format: binary
 *               description: CSV —Ñ–∞–π–ª —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≤—ã–ø–∏—Å–∫–æ–π
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     filename:
 *                       type: string
 *                       example: finance_statement_2024-01-01_2024-01-31.csv
 *                     total_operations:
 *                       type: integer
 *                       example: 156
 *                     period:
 *                       type: string
 *                       example: 2024-01-01 - 2024-01-31
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       500:
 *         description: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–∏—Å–∫–∏
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 */

// üí∞ –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –§–ò–ù–ê–ù–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô –° –†–ê–°–®–ò–†–ï–ù–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô
router.get('/',
  asyncHandler(async (req, res) => {
    const { 
      search, 
      status, 
      date_from, 
      date_to, 
      cash_desk_id, 
      client_search, 
      worker_search, 
      category, 
      description 
    } = req.query;

    console.log('üîç DEBUG: –í—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', {
      search, status, date_from, date_to, cash_desk_id, 
      client_search, worker_search, category, description
    });

    let query = `
      SELECT 
        f.*, 
        c.name as client_name, 
        cd.name as cash_desk_name,
        w.full_name as worker_name,
        w.telegram_username as worker_telegram
      FROM crm.finances f 
      LEFT JOIN crm.clients c ON f.client_id = c.id 
      LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
      LEFT JOIN crm.workers w ON f.worker_id = w.id
    `;

    let params = [];
    let whereConditions = [];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (legacy –ø–∞—Ä–∞–º–µ—Ç—Ä)
    if (search) {
      whereConditions.push(`f.description ILIKE $${params.length + 1}`);
      params.push(`%${search}%`);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É (actual/planned)
    if (status) {
      whereConditions.push(`f.status = $${params.length + 1}`);
      params.push(status);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ "–æ—Ç"
    if (date_from) {
      whereConditions.push(`f.date >= $${params.length + 1}`);
      params.push(date_from);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ "–¥–æ"
    if (date_to) {
      whereConditions.push(`f.date <= $${params.length + 1}`);
      params.push(date_to);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Å—Å–µ
    if (cash_desk_id) {
      whereConditions.push(`f.cash_desk_id = $${params.length + 1}`);
      params.push(cash_desk_id);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É (–§–ò–û, email, —Ç–µ–ª–µ—Ñ–æ–Ω, —Ç–µ–ª–µ–≥—Ä–∞–º)
    if (client_search) {
      whereConditions.push(`(
        LOWER(c.name) LIKE $${params.length + 1} OR 
        LOWER(c.email) LIKE $${params.length + 2} OR 
        c.phone LIKE $${params.length + 3} OR 
        LOWER(c.telegram) LIKE $${params.length + 4}
      )`);
      const searchTerm = `%${client_search.toLowerCase()}%`;
      params.push(searchTerm, searchTerm, searchTerm, searchTerm);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–Ω–∏–∫—É (–§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, —Ç–µ–ª–µ—Ñ–æ–Ω, —Ç–µ–ª–µ–≥—Ä–∞–º)
    if (worker_search) {
      whereConditions.push(`(
        LOWER(w.full_name) LIKE $${params.length + 1} OR 
        LOWER(w.position) LIKE $${params.length + 2} OR 
        w.phone LIKE $${params.length + 3} OR 
        LOWER(w.telegram_username) LIKE $${params.length + 4}
      )`);
      const searchTerm = `%${worker_search.toLowerCase()}%`;
      params.push(searchTerm, searchTerm, searchTerm, searchTerm);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (category) {
      whereConditions.push(`f.category = $${params.length + 1}`);
      params.push(category);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é (–Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
    if (description) {
      whereConditions.push(`f.description ILIKE $${params.length + 1}`);
      params.push(`%${description}%`);
    }

    if (whereConditions.length > 0) {
      query += ` WHERE ${whereConditions.join(' AND ')}`;
    }

    query += ` ORDER BY f.date DESC, f.created_at DESC`;

    const result = await pool.query(query, params);

    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ ${result.rows.length} —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: result.rows,
      count: result.rows.length
    });
  })
);

// üìã –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–´–ü–ò–°–ö–ò –í –§–û–†–ú–ê–¢–ï CSV - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
router.get('/statement',
  asyncHandler(async (req, res) => {
    const { date_from, date_to } = req.query;

    console.log('üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—ã–ø–∏—Å–∫–∏:', {
      date_from, date_to,
      user: req.user?.email || 'UNKNOWN'
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    if (!date_from || !date_to) {
      return res.status(400).json({
        success: false,
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã date_from –∏ date_to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      });
    }

    try {
      // 1. –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• ACTUAL –û–ü–ï–†–ê–¶–ò–ô –ó–ê –ü–ï–†–ò–û–î
      const financesQuery = `
        SELECT 
          f.id,
          f.date,
          f.amount,
          f.type,
          f.status,
          f.description,
          f.category,
          f.transfer_pair_id,
          c.name as client_name,
          c.email as client_email,
          c.phone as client_phone,
          c.telegram as client_telegram,
          cd.name as cash_desk_name,
          w.full_name as worker_name,
          w.telegram_username as worker_telegram
        FROM crm.finances f 
        LEFT JOIN crm.clients c ON f.client_id = c.id 
        LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
        LEFT JOIN crm.workers w ON f.worker_id = w.id
        WHERE f.status = 'actual' 
          AND f.date >= $1 
          AND f.date <= $2
        ORDER BY f.date DESC, f.created_at DESC
      `;

      const financesResult = await pool.query(financesQuery, [date_from, date_to]);
      const allFinances = financesResult.rows;

      console.log('üíæ –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –ë–î:', allFinances.length);

      // üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      console.log('üîç –í–°–ï –û–ü–ï–†–ê–¶–ò–ò –ó–ê –ü–ï–†–ò–û–î:');
      allFinances.forEach((finance, index) => {
        console.log(`  ${index + 1}. ID:${finance.id} ${finance.type} ${finance.amount} ${finance.cash_desk_name} (${finance.date})`);
      });

      // üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º transfer –æ–ø–µ—Ä–∞—Ü–∏–∏
      const transfersInDb = allFinances.filter(f => f.type === 'transfer');
      console.log('üîÑ Transfer –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î:', transfersInDb.length);
      transfersInDb.forEach(t => {
        console.log('üîÑ Transfer –≤ –ë–î:', {
          id: t.id,
          date: t.date,
          amount: t.amount,
          transfer_pair_id: t.transfer_pair_id,
          cash_desk: t.cash_desk_name,
          description: t.description
        });
      });

      // 2. –†–ê–ó–î–ï–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –ù–ê –ö–ê–¢–ï–ì–û–†–ò–ò
      const incomeOperations = [];
      const expenseOperations = [];
      const transferOperations = [];
      const processedTransferPairs = new Set();

      allFinances.forEach(finance => {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é ID:${finance.id} —Ç–∏–ø:${finance.type} —Å—É–º–º–∞:${finance.amount}`);

        if (finance.type === 'transfer' && finance.transfer_pair_id) {
          console.log(`üîÑ –ù–∞–π–¥–µ–Ω–∞ transfer –æ–ø–µ—Ä–∞—Ü–∏—è ID:${finance.id}, pair_id:${finance.transfer_pair_id}`);

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏
          if (!processedTransferPairs.has(finance.id)) {
            console.log(`üîÑ –û–ø–µ—Ä–∞—Ü–∏—è ID:${finance.id} –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏—â–µ–º –ø–∞—Ä—É`);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∏—â–µ–º –ø–∞—Ä–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            const pairOperation = allFinances.find(f =>
              f.id === finance.transfer_pair_id &&
              f.transfer_pair_id === finance.id &&
              f.type === 'transfer'
            );

            if (pairOperation) {
              console.log('‚úÖ –ù–ê–ô–î–ï–ù–ê –ü–ê–†–ê:', {
                op1: { id: finance.id, amount: finance.amount, cash_desk: finance.cash_desk_name },
                op2: { id: pairOperation.id, amount: pairOperation.amount, cash_desk: pairOperation.cash_desk_name }
              });

              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞) –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞)
              const senderOperation = finance.amount < 0 ? finance : pairOperation;
              const receiverOperation = finance.amount > 0 ? finance : pairOperation;

              const transferDetail = {
                date: finance.date,
                amount: Math.abs(finance.amount), // –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
                category: finance.category || '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å',
                sender_cash_desk: senderOperation.cash_desk_name || '',
                receiver_cash_desk: receiverOperation.cash_desk_name || '',
                description: finance.description || ''
              };

              transferOperations.push(transferDetail);

              // –û—Ç–º–µ—á–∞–µ–º –æ–±–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
              processedTransferPairs.add(finance.id);
              processedTransferPairs.add(pairOperation.id);

              console.log('‚úÖ –î–û–ë–ê–í–õ–ï–ù –ü–ï–†–ï–í–û–î –í –í–´–ü–ò–°–ö–£:', transferDetail);
            } else {
              console.log(`‚ùå –ü–ê–†–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê –¥–ª—è ID:${finance.id} pair_id:${finance.transfer_pair_id}`);

              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ
              console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:');
              allFinances.forEach(f => {
                if (f.type === 'transfer') {
                  console.log(`  ID:${f.id} pair_id:${f.transfer_pair_id} amount:${f.amount}`);
                }
              });
            }
          } else {
            console.log(`‚è≠Ô∏è Transfer –æ–ø–µ—Ä–∞—Ü–∏—è ID:${finance.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
          }
        } else if (finance.type === 'income') {
          incomeOperations.push(finance);
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥: ${finance.amount} (${finance.cash_desk_name})`);
        } else if (finance.type === 'expense') {
          expenseOperations.push(finance);
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: ${finance.amount} (${finance.cash_desk_name})`);
        }
      });

      console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ó–î–ï–õ–ï–ù–ò–Ø:');
      console.log('  –î–æ—Ö–æ–¥—ã:', incomeOperations.length);
      console.log('  –†–∞—Å—Ö–æ–¥—ã:', expenseOperations.length);
      console.log('  –ü–µ—Ä–µ–≤–æ–¥—ã:', transferOperations.length);

      // 3. –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–û–í –ö–ê–°–° –ù–ê –û–°–ù–û–í–ï –û–ü–ï–†–ê–¶–ò–ô –í –í–´–ü–ò–°–ö–ï
      const cashDeskBalances = {};

      allFinances.forEach(finance => {
        const cashDeskName = finance.cash_desk_name;
        if (cashDeskName) {
          if (!cashDeskBalances[cashDeskName]) {
            cashDeskBalances[cashDeskName] = 0;
          }
          cashDeskBalances[cashDeskName] += Number(finance.amount);
        }
      });

      console.log('üí∞ –ë–∞–ª–∞–Ω—Å—ã –∫–∞—Å—Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:', cashDeskBalances);

      // 4. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï CSV
      const csvRows = [];

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è CSV –∑–Ω–∞—á–µ–Ω–∏–π
      const escapeCsvValue = (value) => {
        if (value === null || value === undefined) return '';
        const stringValue = String(value);
        if (stringValue.includes(',') || stringValue.includes('"') || stringValue.includes('\n')) {
          return `"${stringValue.replace(/"/g, '""')}"`;
        }
        return stringValue;
      };

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
      const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU');
      };

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
      const formatPeriod = (dateFrom, dateTo) => {
        const fromDate = new Date(dateFrom);
        const toDate = new Date(dateTo);

        const fromFormatted = `${fromDate.getDate().toString().padStart(2, '0')}.${(fromDate.getMonth() + 1).toString().padStart(2, '0')}`;
        const toFormatted = `${toDate.getDate().toString().padStart(2, '0')}.${(toDate.getMonth() + 1).toString().padStart(2, '0')}`;

        return `${fromFormatted}-${toFormatted}`;
      };

      // –ó–ê–ì–û–õ–û–í–û–ö –í–´–ü–ò–°–ö–ò
      csvRows.push([`–í—ã–ø–∏—Å–∫–∞ ${formatPeriod(date_from, date_to)}`, '', '', '', '', '', '', '', '', '']);
      csvRows.push(['', '', '', '', '', '', '', '', '', '']); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

      // –°–ï–ö–¶–ò–Ø –î–û–•–û–î–û–í
      csvRows.push(['–î–æ—Ö–æ–¥—ã', '', '', '', '', '', '', '', '', '']);
      csvRows.push(['–î–∞—Ç–∞', '–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'client_name', 'client_telegram', 'client_email', 'worker_name', 'worker_telegram', '–ö–∞—Å—Å–∞', '–û–ø–∏—Å–∞–Ω–∏–µ']);

      let totalIncome = 0;
      incomeOperations.forEach(operation => {
        totalIncome += Number(operation.amount);
        csvRows.push([
          formatDate(operation.date),
          operation.amount,
          operation.category || '',
          operation.client_name || '',
          operation.client_telegram || '',
          operation.client_email || '',
          operation.worker_name || '',
          operation.worker_telegram || '',
          operation.cash_desk_name || '',
          operation.description || ''
        ]);
      });

      csvRows.push(['–ò—Ç–æ–≥–æ:', totalIncome, '', '', '', '', '', '', '', '']);
      csvRows.push(['', '', '', '', '', '', '', '', '', '']); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
      csvRows.push(['', '', '', '', '', '', '', '', '', '']); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

      // –°–ï–ö–¶–ò–Ø –†–ê–°–•–û–î–û–í
      csvRows.push(['–†–∞—Å—Ö–æ–¥—ã', '', '', '', '', '', '', '', '', '']);
      csvRows.push(['–î–∞—Ç–∞', '–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'client_name', 'client_telegram', 'client_email', 'worker_name', 'worker_telegram', '–ö–∞—Å—Å–∞', '–û–ø–∏—Å–∞–Ω–∏–µ']);

      let totalExpense = 0;
      expenseOperations.forEach(operation => {
        totalExpense += Number(operation.amount);
        csvRows.push([
          formatDate(operation.date),
          operation.amount,
          operation.category || '',
          operation.client_name || '',
          operation.client_telegram || '',
          operation.client_email || '',
          operation.worker_name || '',
          operation.worker_telegram || '',
          operation.cash_desk_name || '',
          operation.description || ''
        ]);
      });

      csvRows.push(['–ò—Ç–æ–≥–æ:', totalExpense, '', '', '', '', '', '', '', '']);
      csvRows.push(['', '', '', '', '', '', '', '', '', '']); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

      // –°–ï–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–û–í –ú–ï–ñ–î–£ –ö–ê–°–°–ê–ú–ò
      csvRows.push(['–ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∫–∞—Å—Å', '', '', '', '', '', '', '', '', '']);
      csvRows.push(['–î–∞—Ç–∞', '–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–∞—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–ö–∞—Å—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å', '–û–ø–∏—Å–∞–Ω–∏–µ', '', '', '', '']);

      console.log('üìã –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ CSV:', transferOperations.length, '—à—Ç—É–∫');
      transferOperations.forEach((transfer, index) => {
        console.log(`üìã –ü–µ—Ä–µ–≤–æ–¥ ${index + 1}:`, transfer);
        csvRows.push([
          formatDate(transfer.date),
          transfer.amount,
          transfer.category,
          transfer.sender_cash_desk,
          transfer.receiver_cash_desk,
          transfer.description,
          '', '', '', ''
        ]);
      });

      csvRows.push(['', '', '', '', '', '', '', '', '', '']); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

      // –°–ï–ö–¶–ò–Ø –ò–¢–û–ì–û–í–û–ì–û –ë–ê–õ–ê–ù–°–ê –ö–ê–°–°
      csvRows.push(['–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å', '', '', '', '', '', '', '', '', '']);
      csvRows.push(['–ö–∞—Å—Å–∞', '–ë–∞–ª–∞–Ω—Å', '', '', '', '', '', '', '', '']);

      Object.entries(cashDeskBalances)
        .sort(([a], [b]) => a.localeCompare(b))
        .forEach(([cashDeskName, balance]) => {
          csvRows.push([cashDeskName, balance, '', '', '', '', '', '', '', '']);
        });

      // 5. –°–û–ó–î–ê–ù–ò–ï CSV –ö–û–ù–¢–ï–ù–¢–ê
      const csvContent = csvRows
        .map(row => row.map(escapeCsvValue).join(','))
        .join('\n');

      // 6. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò–ú–ï–ù–ò –§–ê–ô–õ–ê
      const filename = `statement_${formatPeriod(date_from, date_to).replace('-', '_')}.csv`;

      // 7. –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–ê
      res.setHeader('Content-Type', 'text/csv; charset=utf-8');
      res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);

      console.log(`üìã –í—ã–ø–∏—Å–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: ${incomeOperations.length} –¥–æ—Ö–æ–¥–æ–≤, ${expenseOperations.length} —Ä–∞—Å—Ö–æ–¥–æ–≤, ${transferOperations.length} –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);

      res.send(csvContent);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–∏—Å–∫–∏:', error);
      throw error;
    }
  })
);

// üÜï –†–û–£–¢ –î–õ–Ø –§–ò–ù–ê–ù–°–û–í–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò
router.get('/analytics', async (req, res) => {
  try {
    const { period = 30, start_date, end_date } = req.query;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞
    const validPeriods = [7, 14, 30, 60, 90, 180, 365];
    if (!validPeriods.includes(parseInt(period))) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 7, 14, 30, 60, 90, 180, 365' 
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
    let queryStartDate, queryEndDate;
    
    if (start_date && end_date) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
      queryStartDate = start_date;
      queryEndDate = end_date;
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥
      queryEndDate = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è
      queryStartDate = new Date(Date.now() - parseInt(period) * 24 * 60 * 60 * 1000)
        .toISOString().split('T')[0];
    }

    // SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    const metricsQuery = `
      WITH period_data AS (
        SELECT 
          date,
          amount,
          type,
          category,
          description
        FROM crm.finances 
        WHERE status = 'actual'
          AND type IN ('income', 'expense')
          AND date >= $1
          AND date <= $2
      )
      SELECT 
        SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) as total_income,
        SUM(CASE WHEN type = 'expense' THEN ABS(amount) ELSE 0 END) as total_expense,
        SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) - 
        SUM(CASE WHEN type = 'expense' THEN ABS(amount) ELSE 0 END) as profit,
        CASE 
          WHEN SUM(CASE WHEN type = 'expense' THEN ABS(amount) ELSE 0 END) > 0 
          THEN ROUND(
            (SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) / 
             SUM(CASE WHEN type = 'expense' THEN ABS(amount) ELSE 0 END))::numeric, 2
          )
          ELSE NULL 
        END as income_expense_ratio,
        CASE 
          WHEN SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) > 0 
          THEN ROUND(
            ((SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) - 
              SUM(CASE WHEN type = 'expense' THEN ABS(amount) ELSE 0 END)) / 
             SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) * 100)::numeric, 2
          )
          ELSE NULL 
        END as profit_margin,
        COUNT(*) as total_operations
      FROM period_data
    `;

    // SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoriesQuery = `
      SELECT 
        category,
        type,
        SUM(amount) as total_amount,
        COUNT(*) as operations_count
      FROM crm.finances 
      WHERE status = 'actual'
        AND type IN ('income', 'expense')
        AND date >= $1
        AND date <= $2
      GROUP BY category, type
      ORDER BY category, type
    `;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã
    const [metricsResult, categoriesResult] = await Promise.all([
      pool.query(metricsQuery, [queryStartDate, queryEndDate]),
      pool.query(categoriesQuery, [queryStartDate, queryEndDate])
    ]);

    const metrics = metricsResult.rows[0];
    const categories = categoriesResult.rows;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoriesByType = {
      income: {},
      expense: {}
    };

    categories.forEach(row => {
      if (row.type === 'income') {
        categoriesByType.income[row.category] = {
          amount: parseFloat(row.total_amount),
          operations_count: parseInt(row.operations_count)
        };
      } else {
        categoriesByType.expense[row.category] = {
          amount: parseFloat(row.total_amount),
          operations_count: parseInt(row.operations_count)
        };
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const response = {
      period: parseInt(period),
      start_date: queryStartDate,
      end_date: queryEndDate,
      metrics: {
        total_income: parseFloat(metrics.total_income || 0),
        total_expense: parseFloat(metrics.total_expense || 0),
        profit: parseFloat(metrics.profit || 0),
        ebitda: parseFloat(metrics.profit || 0), // –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ EBITDA = P&L
        income_expense_ratio: metrics.income_expense_ratio,
        profit_margin: metrics.profit_margin,
        total_operations: parseInt(metrics.total_operations || 0)
      },
      categories: categoriesByType
    };

    res.json(response);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
  }
});

// üìà –†–û–£–¢ –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –ë–ê–õ–ê–ù–°–ê –ü–û –î–ù–Ø–ú
router.get('/balance-history', async (req, res) => {
  try {
    const { period = 30, start_date, end_date } = req.query;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞
    const validPeriods = [7, 14, 30, 60, 90, 180, 365];
    if (!validPeriods.includes(parseInt(period))) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 7, 14, 30, 60, 90, 180, 365' 
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –ø–µ—Ä–∏–æ–¥–∞
    let queryStartDate, queryEndDate;
    
    if (start_date && end_date) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
      queryStartDate = start_date;
      queryEndDate = end_date;
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥
      queryEndDate = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è
      queryStartDate = new Date(Date.now() - parseInt(period) * 24 * 60 * 60 * 1000)
        .toISOString().split('T')[0];
    }

    // SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ –¥–Ω—è–º
    const balanceHistoryQuery = `
      WITH daily_operations AS (
        SELECT 
          date,
          SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END) as daily_income,
          SUM(CASE WHEN type = 'expense' THEN amount ELSE 0 END) as daily_expense,
          COUNT(*) as transactions_count
        FROM crm.finances 
        WHERE status = 'actual'
          AND type IN ('income', 'expense')
          AND date >= $1
          AND date <= $2
        GROUP BY date
        ORDER BY date
      ),
      cumulative_balance AS (
        SELECT 
          date,
          daily_income,
          daily_expense,
          transactions_count,
          SUM(daily_income + daily_expense) OVER (ORDER BY date) as cumulative_balance
        FROM daily_operations
      )
      SELECT 
        date,
        daily_income,
        daily_expense,
        transactions_count,
        cumulative_balance,
        (daily_income + daily_expense) as daily_change
      FROM cumulative_balance
      ORDER BY date
    `;

    const result = await pool.query(balanceHistoryQuery, [queryStartDate, queryEndDate]);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const balanceHistory = result.rows.map(row => ({
      date: row.date,
      balance: parseFloat(row.cumulative_balance || 0),
      daily_change: parseFloat(row.daily_change || 0),
      transactions_count: parseInt(row.transactions_count || 0),
      daily_income: parseFloat(row.daily_income || 0),
      daily_expense: parseFloat(row.daily_expense || 0)
    }));

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–¥–∞
    let trend = 'stable';
    if (balanceHistory.length >= 2) {
      const firstBalance = balanceHistory[0].balance;
      const lastBalance = balanceHistory[balanceHistory.length - 1].balance;
      const change = lastBalance - firstBalance;
      
      if (change > 0) {
        trend = 'growing';
      } else if (change < 0) {
        trend = 'declining';
      }
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const totalIncome = balanceHistory.reduce((sum, day) => sum + day.daily_income, 0);
    const totalExpense = balanceHistory.reduce((sum, day) => sum + Math.abs(day.daily_expense), 0);
    const totalChange = balanceHistory.reduce((sum, day) => sum + day.daily_change, 0);
    const avgDailyChange = balanceHistory.length > 0 ? totalChange / balanceHistory.length : 0;

    const statistics = {
      trend,
      total_income: totalIncome,
      total_expense: totalExpense,
      total_change: totalChange,
      avg_daily_change: avgDailyChange,
      period_start: queryStartDate,
      period_end: queryEndDate,
      days_count: balanceHistory.length
    };

    res.json({
      success: true,
      balance_history: balanceHistory,
      statistics
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞' });
  }
});

// üìà –ü–û–õ–£–ß–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò –ü–û ID
router.get('/:id',
  validateIdParam,
  asyncHandler(async (req, res) => {
    const { id } = req.params;

    const result = await pool.query(`
      SELECT 
        f.*, 
        c.name as client_name, 
        cd.name as cash_desk_name,
        w.full_name as worker_name,
        w.telegram_username as worker_telegram
      FROM crm.finances f 
      LEFT JOIN crm.clients c ON f.client_id = c.id 
      LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
      LEFT JOIN crm.workers w ON f.worker_id = w.id
      WHERE f.id = $1
    `, [id]);

    if (result.rows.length === 0) {
      throw new NotFoundError('–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è');
    }

    console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è ID:${id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: result.rows[0]
    });
  })
);

// üí∏ –ü–û–õ–£–ß–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –ü–û –ö–õ–ò–ï–ù–¢–£
router.get('/client/:clientId',
  validateClientIdParam,
  asyncHandler(async (req, res) => {
    const { clientId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    const clientCheck = await pool.query(
      'SELECT name FROM crm.clients WHERE id = $1',
      [clientId]
    );

    if (clientCheck.rows.length === 0) {
      throw new NotFoundError('–ö–ª–∏–µ–Ω—Ç');
    }

    const result = await pool.query(`
      SELECT 
        f.*, 
        c.name as client_name, 
        cd.name as cash_desk_name,
        w.full_name as worker_name,
        w.telegram_username as worker_telegram
      FROM crm.finances f 
      LEFT JOIN crm.clients c ON f.client_id = c.id 
      LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
      LEFT JOIN crm.workers w ON f.worker_id = w.id
      WHERE f.client_id = $1
      ORDER BY f.date DESC, f.created_at DESC
    `, [clientId]);

    console.log(`üí∏ –ü–æ–ª—É—á–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ID:${clientId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: result.rows,
      count: result.rows.length
    });
  })
);

// üí≥ –°–û–ó–î–ê–ù–ò–ï TRANSFER –ü–ê–†–´
router.post('/transfer',
  requireRole(['admin', 'manager']),
  validateTransferPair,
  asyncHandler(async (req, res) => {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ transfer –ø–∞—Ä—ã:', req.body);
    return await createTransferPair(req, res);
  })
);

// üí∞ –°–û–ó–î–ê–ù–ò–ï –û–ë–´–ß–ù–û–ô –§–ò–ù–ê–ù–°–û–í–û–ô –û–ü–ï–†–ê–¶–ò–ò
router.post('/',
  requireRole(['admin', 'manager']),
  validateFinance,
  asyncHandler(async (req, res) => {
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', req.body);
    return await createRegularOperation(req, res);
  })
);

// üîÑ –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø TRANSFER –ü–ê–†–´
const createTransferPair = async (req, res) => {
  const { amount, description, date, cash_desk_from_id, cash_desk_to_id } = req.body;

  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ transfer –ø–∞—Ä—ã:', {
    amount, description, cash_desk_from_id, cash_desk_to_id, date
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ middleware

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Å
  const fromCashDeskCheck = await pool.query(
    'SELECT id, name FROM crm.cash_desks WHERE id = $1',
    [cash_desk_from_id]
  );

  const toCashDeskCheck = await pool.query(
    'SELECT id, name FROM crm.cash_desks WHERE id = $1',
    [cash_desk_to_id]
  );

  if (fromCashDeskCheck.rows.length === 0) {
    throw new NotFoundError('–ö–∞—Å—Å–∞-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å');
  }

  if (toCashDeskCheck.rows.length === 0) {
    throw new NotFoundError('–ö–∞—Å—Å–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—å');
  }

  // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã
  const client = await pool.connect();

  try {
    await client.query('BEGIN');

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Ä–∞—Å—Ö–æ–¥ —Å –∫–∞—Å—Å—ã-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
    const operation1 = await client.query(
      `INSERT INTO crm.finances (
        date, amount, type, status, description, category, 
        cash_desk_id, transfer_pair_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id`,
      [
        date,
        -Math.abs(Number(amount)), // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
        'transfer',
        'actual', // Transfer –≤—Å–µ–≥–¥–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ
        `${description || '–ü–µ—Ä–µ–≤–æ–¥'} (–æ—Ç–ø—Ä–∞–≤–∫–∞)`,
        '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏',
        cash_desk_from_id,
        null // –ü–æ–∫–∞ null, –æ–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      ]
    );

    const operation1Id = operation1.rows[0].id;

    // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (–¥–æ—Ö–æ–¥ –Ω–∞ –∫–∞—Å—Å—É-–ø–æ–ª—É—á–∞—Ç–µ–ª—è)
    const operation2 = await client.query(
      `INSERT INTO crm.finances (
        date, amount, type, status, description, category, 
        cash_desk_id, transfer_pair_id
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id`,
      [
        date,
        Math.abs(Number(amount)), // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –¥–æ—Ö–æ–¥–∞
        'transfer',
        'actual',
        `${description || '–ü–µ—Ä–µ–≤–æ–¥'} (–ø–æ–ª—É—á–µ–Ω–∏–µ)`,
        '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏',
        cash_desk_to_id,
        operation1Id // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
      ]
    );

    const operation2Id = operation2.rows[0].id;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ç–æ—Ä—É—é
    await client.query(
      'UPDATE crm.finances SET transfer_pair_id = $1 WHERE id = $2',
      [operation2Id, operation1Id]
    );

    await client.query('COMMIT');

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞—Å—Å
    const createdOperations = await pool.query(`
      SELECT 
        f.*, 
        cd.name as cash_desk_name
      FROM crm.finances f 
      LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
      WHERE f.id IN ($1, $2)
      ORDER BY f.amount ASC -- –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Ö–æ–¥, –ø–æ—Ç–æ–º –¥–æ—Ö–æ–¥
    `, [operation1Id, operation2Id]);

    console.log(`‚úÖ Transfer –ø–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}:`, {
      operation1Id,
      operation2Id,
      amount: Math.abs(Number(amount)),
      fromCashDesk: fromCashDeskCheck.rows[0].name,
      toCashDesk: toCashDeskCheck.rows[0].name
    });

    res.status(201).json({
      success: true,
      message: '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      data: {
        operations: createdOperations.rows,
        transfer_info: {
          amount: Math.abs(Number(amount)),
          from_cash_desk: fromCashDeskCheck.rows[0].name,
          to_cash_desk: toCashDeskCheck.rows[0].name
        }
      }
    });

  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
};

// üí∞ –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –û–ë–´–ß–ù–û–ô –û–ü–ï–†–ê–¶–ò–ò
const createRegularOperation = async (req, res) => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –≤ middleware

  const {
    date, amount, type, status, description, category,
    client_id, clientId, email,
    worker_id, workerId, employee,
    cash_desk_id, cashDeskId
  } = req.body;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  let finalClientId = client_id || clientId;
  let finalWorkerId = worker_id || workerId;
  const finalCashDeskId = cash_desk_id || cashDeskId;

  console.log('üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è:', {
    finalClientId, finalWorkerId, finalCashDeskId, email, employee
  });

  // –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email
  if (!finalClientId && email) {
    const clientSearch = await pool.query(
      'SELECT id FROM crm.clients WHERE email = $1',
      [email.trim()]
    );

    if (clientSearch.rows.length > 0) {
      finalClientId = clientSearch.rows[0].id;
      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ email:', { email, clientId: finalClientId });
    } else {
      throw new NotFoundError(`–ö–ª–∏–µ–Ω—Ç —Å email "${email}"`);
    }
  }

  // –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø–æ telegram
  if (!finalWorkerId && employee) {
    const cleanTelegram = employee.startsWith('@') ? employee : `@${employee}`;
    const workerSearch = await pool.query(
      'SELECT id FROM crm.workers WHERE telegram_username = $1',
      [cleanTelegram]
    );

    if (workerSearch.rows.length > 0) {
      finalWorkerId = workerSearch.rows[0].id;
      console.log('‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –ø–æ telegram:', { employee, workerId: finalWorkerId });
    } else {
      throw new NotFoundError(`–†–∞–±–æ—Ç–Ω–∏–∫ —Å Telegram "${employee}"`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
  if (finalClientId) {
    const clientCheck = await pool.query(
      'SELECT id, name FROM crm.clients WHERE id = $1',
      [finalClientId]
    );

    if (clientCheck.rows.length === 0) {
      throw new NotFoundError('–ö–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
  if (finalWorkerId) {
    const workerCheck = await pool.query(
      'SELECT id, full_name, telegram_username FROM crm.workers WHERE id = $1',
      [finalWorkerId]
    );

    if (workerCheck.rows.length === 0) {
      throw new NotFoundError('–†–∞–±–æ—Ç–Ω–∏–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Å—ã
  if (!finalCashDeskId) {
    throw new BusinessLogicError('–ö–∞—Å—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
  }

  const cashDeskCheck = await pool.query(
    'SELECT id, name FROM crm.cash_desks WHERE id = $1',
    [finalCashDeskId]
  );

  if (cashDeskCheck.rows.length === 0) {
    throw new NotFoundError('–ö–∞—Å—Å–∞');
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const finalAmount = type === 'expense' ? -Number(amount) : Number(amount);

  // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
  const result = await pool.query(
    `INSERT INTO crm.finances (date, amount, type, status, description, category, client_id, cash_desk_id, worker_id) 
     VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) 
     RETURNING *`,
    [date, finalAmount, type, status, description, category, finalClientId, finalCashDeskId, finalWorkerId]
  );

  // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∏–º–µ–Ω–∞–º–∏
  const financeWithNames = await pool.query(`
    SELECT 
      f.*, 
      c.name as client_name, 
      cd.name as cash_desk_name,
      w.full_name as worker_name,
      w.telegram_username as worker_telegram
    FROM crm.finances f 
    LEFT JOIN crm.clients c ON f.client_id = c.id 
    LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
    LEFT JOIN crm.workers w ON f.worker_id = w.id
    WHERE f.id = $1
  `, [result.rows[0].id]);

  console.log(`‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}:`, {
    type, amount: finalAmount, status, finalClientId, finalWorkerId, finalCashDeskId
  });

  res.status(201).json({
    success: true,
    message: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
    data: financeWithNames.rows[0]
  });
};

// üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–û–ô –û–ü–ï–†–ê–¶–ò–ò
router.put('/:id',
  validateIdParam,
  validateFinance,
  asyncHandler(async (req, res) => {
    const { id } = req.params;
    const {
      date, amount, type, status, description, category,
      client_id, cash_desk_id, clientId, cashDeskId
    } = req.body;

    const finalClientId = client_id || clientId;
    const finalCashDeskId = cash_desk_id || cashDeskId;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const existingOperation = await pool.query(
      'SELECT * FROM crm.finances WHERE id = $1',
      [id]
    );

    if (existingOperation.rows.length === 0) {
      throw new NotFoundError('–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è');
    }

    // üö´ –ó–ê–ü–†–ï–¢ –ù–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï TRANSFER –û–ü–ï–†–ê–¶–ò–ô
    if (existingOperation.rows[0].type === 'transfer') {
      throw new BusinessLogicError('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if (finalClientId) {
      const clientCheck = await pool.query(
        'SELECT id FROM crm.clients WHERE id = $1',
        [finalClientId]
      );

      if (clientCheck.rows.length === 0) {
        throw new NotFoundError('–ö–ª–∏–µ–Ω—Ç');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Å—ã
    if (!finalCashDeskId) {
      throw new BusinessLogicError('–ö–∞—Å—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏');
    }

    const cashDeskCheck = await pool.query(
      'SELECT id FROM crm.cash_desks WHERE id = $1',
      [finalCashDeskId]
    );

    if (cashDeskCheck.rows.length === 0) {
      throw new NotFoundError('–ö–∞—Å—Å–∞');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const finalAmount = type === 'expense' ? -Number(amount) : Number(amount);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    const result = await pool.query(
      `UPDATE crm.finances 
       SET date = $2, amount = $3, type = $4, status = $5, description = $6, 
           category = $7, client_id = $8, cash_desk_id = $9, updated_at = CURRENT_TIMESTAMP
       WHERE id = $1 
       RETURNING *`,
      [id, date, finalAmount, type, status, description, category, finalClientId, finalCashDeskId]
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∏–º–µ–Ω–∞–º–∏
    const financeWithNames = await pool.query(`
      SELECT 
        f.*, 
        c.name as client_name, 
        cd.name as cash_desk_name,
        w.full_name as worker_name,
        w.telegram_username as worker_telegram
      FROM crm.finances f 
      LEFT JOIN crm.clients c ON f.client_id = c.id 
      LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
      LEFT JOIN crm.workers w ON f.worker_id = w.id
      WHERE f.id = $1
    `, [id]);

    console.log(`‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}:`, {
      operationId: id, type, amount: finalAmount
    });

    res.json({
      success: true,
      message: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      data: financeWithNames.rows[0]
    });
  })
);

// üóëÔ∏è –û–ë–ù–û–í–õ–ï–ù–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è transfer –ø–∞—Ä
router.delete('/:id',
  requireRole(['admin', 'manager']),
  validateIdParam,
  asyncHandler(async (req, res) => {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const existingOperation = await pool.query(
      'SELECT * FROM crm.finances WHERE id = $1',
      [id]
    );

    if (existingOperation.rows.length === 0) {
      throw new NotFoundError('–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è');
    }

    const operation = existingOperation.rows[0];

    // üÜï –ù–û–í–û–ï: –ï—Å–ª–∏ —ç—Ç–æ transfer –æ–ø–µ—Ä–∞—Ü–∏—è, —É–¥–∞–ª—è–µ–º –æ–±–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø–∞—Ä—ã
    if (operation.type === 'transfer' && operation.transfer_pair_id) {
      const client = await pool.connect();

      try {
        await client.query('BEGIN');

        // –£–¥–∞–ª—è–µ–º –æ–±–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        const deleteResult = await client.query(
          'DELETE FROM crm.finances WHERE id IN ($1, $2) RETURNING *',
          [id, operation.transfer_pair_id]
        );

        await client.query('COMMIT');

        console.log(`üóëÔ∏è Transfer –ø–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}:`, {
          deletedOperations: deleteResult.rows.length,
          amount: Math.abs(operation.amount)
        });

        res.json({
          success: true,
          message: 'Transfer –ø–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
          data: {
            deleted_operations: deleteResult.rows.length,
            operations: deleteResult.rows
          }
        });

      } catch (error) {
        await client.query('ROLLBACK');
        throw error;
      } finally {
        client.release();
      }
    } else {
      // –û–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è income/expense –æ–ø–µ—Ä–∞—Ü–∏–π
      const result = await pool.query(
        'DELETE FROM crm.finances WHERE id = $1 RETURNING *',
        [id]
      );

      console.log(`üóëÔ∏è –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}:`, {
        operationId: id, type: result.rows[0].type, amount: result.rows[0].amount
      });

      res.json({
        success: true,
        message: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞',
        data: result.rows[0]
      });
    }
  })
);

// üìä –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê - –∏—Å–∫–ª—é—á–∞–µ–º transfer –∏–∑ –æ–±—â–∏—Ö –º–µ—Ç—Ä–∏–∫
router.get('/summary/stats',
  asyncHandler(async (req, res) => {
    const { date_from, date_to } = req.query;

    // üÜï –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º transfer –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let query = `
      SELECT 
        COUNT(*) as total_operations,
        COUNT(CASE WHEN status = 'actual' THEN 1 END) as actual_operations,
        COUNT(CASE WHEN status = 'planned' THEN 1 END) as planned_operations,
        COALESCE(SUM(CASE WHEN type = 'income' AND status = 'actual' THEN amount ELSE 0 END), 0) as actual_income,
        COALESCE(SUM(CASE WHEN type = 'expense' AND status = 'actual' THEN amount ELSE 0 END), 0) as actual_expense,
        COALESCE(SUM(CASE WHEN type IN ('income', 'expense') AND status = 'actual' THEN amount ELSE 0 END), 0) as actual_balance,
        COALESCE(SUM(CASE WHEN type = 'income' AND status = 'planned' THEN amount ELSE 0 END), 0) as planned_income,
        COALESCE(SUM(CASE WHEN type = 'expense' AND status = 'planned' THEN amount ELSE 0 END), 0) as planned_expense,
        COALESCE(SUM(CASE WHEN type IN ('income', 'expense') AND status = 'planned' THEN amount ELSE 0 END), 0) as planned_balance,
        -- üÜï –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ transfer –æ–ø–µ—Ä–∞—Ü–∏—è–º
        COUNT(CASE WHEN type = 'transfer' THEN 1 END) as transfer_operations,
        COALESCE(SUM(CASE WHEN type = 'transfer' AND amount > 0 THEN amount ELSE 0 END), 0) as total_transfer_amount
      FROM crm.finances
      WHERE type IN ('income', 'expense', 'transfer')
    `;

    let params = [];
    let whereConditions = ['type IN (\'income\', \'expense\', \'transfer\')'];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º
    if (date_from) {
      whereConditions.push(`date >= $${params.length + 1}`);
      params.push(date_from);
    }

    if (date_to) {
      whereConditions.push(`date <= $${params.length + 1}`);
      params.push(date_to);
    }

    if (whereConditions.length > 0) {
      query = query.replace('WHERE type IN (\'income\', \'expense\', \'transfer\')', `WHERE ${whereConditions.join(' AND ')}`);
    }

    const result = await pool.query(query, params);
    const stats = result.rows[0];

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`, {
      filters: { date_from: date_from || null, date_to: date_to || null }
    });

    res.json({
      success: true,
      data: {
        // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–±–µ–∑ transfer)
        total_operations: parseInt(stats.total_operations) - parseInt(stats.transfer_operations),
        actual_operations: parseInt(stats.actual_operations) - parseInt(stats.transfer_operations),
        planned_operations: parseInt(stats.planned_operations),
        actual_income: parseFloat(stats.actual_income),
        actual_expense: Math.abs(parseFloat(stats.actual_expense)),
        actual_balance: parseFloat(stats.actual_balance),
        planned_income: parseFloat(stats.planned_income),
        planned_expense: Math.abs(parseFloat(stats.planned_expense)),
        planned_balance: parseFloat(stats.planned_balance),

        // üÜï –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–µ–≤–æ–¥–∞–º
        transfers: {
          total_operations: parseInt(stats.transfer_operations),
          total_amount: parseFloat(stats.total_transfer_amount)
        }
      }
    });
  })
);

module.exports = router;