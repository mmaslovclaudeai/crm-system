// backend/routes/public.js
const express = require('express');
const router = express.Router();
const pool = require('../database');
const rateLimit = require('express-rate-limit');
const Joi = require('joi');



// üõ°Ô∏è Rate limiting –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
const leadSubmissionLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 5, // –º–∞–∫—Å–∏–º—É–º 5 –∑–∞—è–≤–æ–∫ —Å –æ–¥–Ω–æ–≥–æ IP –∑–∞ 15 –º–∏–Ω—É—Ç
  message: {
    error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞—è–≤–æ–∫ —Å –≤–∞—à–µ–≥–æ IP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    details: '–ú–∞–∫—Å–∏–º—É–º 5 –∑–∞—è–≤–æ–∫ –∑–∞ 15 –º–∏–Ω—É—Ç'
  },
  standardHeaders: true,
  legacyHeaders: false
});

// üìã –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞—è–≤–∫–∏
const leadSchema = Joi.object({
  name: Joi.string()
    .min(2)
    .max(255)
    .pattern(/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s\-\.]+$/)
    .required()
    .messages({
      'string.min': '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞',
      'string.max': '–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤',
      'string.pattern.base': '–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏',
      'any.required': '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    }),

  phone: Joi.string()
    .pattern(/^7\d{10}$/)
    .required()
    .messages({
      'string.pattern.base': '–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 71234567890',
      'any.required': '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    }),

  email: Joi.string()
    .email()
    .required()
    .messages({
      'string.email': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
      'any.required': 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
    }),



  source: Joi.string()
    .max(50)
    .optional()
    .default('crm-form'),

  // Honeypot –ø–æ–ª–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤
  website: Joi.string()
    .max(0)
    .optional()
    .messages({
      'string.max': '–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º'
    })
});

// üõ†Ô∏è –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const normalizePhone = (phone) => {
  if (!phone) return null;

  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
  const cleaned = phone.replace(/\D/g, '');

  // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  const normalized = cleaned.startsWith('8') ? '7' + cleaned.slice(1) : cleaned;

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º 7
  const withCountryCode = normalized.startsWith('7') ? normalized : '7' + normalized;

  // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 11 —Ü–∏—Ñ—Ä
  return withCountryCode.slice(0, 11);
};



// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
const isSpamLike = (data) => {
  const spamPatterns = [
    /casino/i,
    /viagra/i,
    /loan/i,
    /money/i,
    /crypto/i,
    /bitcoin/i,
    /forex/i,
    /investment/i
  ];

  const textToCheck = `${data.name} ${data.email}`.toLowerCase();
  return spamPatterns.some(pattern => pattern.test(textToCheck));
};



// üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
router.post('/leads', leadSubmissionLimiter, async (req, res) => {
  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', req.body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const { error, value } = leadSchema.validate(req.body, {
      stripUnknown: true,
      abortEarly: false
    });

    if (error) {
      const validationErrors = error.details.map(detail => ({
        field: detail.path.join('.'),
        message: detail.message
      }));

      console.log('‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validationErrors);

      return res.status(400).json({
        error: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: validationErrors
      });
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const normalizedData = {
      name: value.name.trim(),
      email: value.email.trim().toLowerCase(),
      phone: normalizePhone(value.phone),
      source: value.source || 'crm-form'
    };

    console.log('üîÑ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', normalizedData);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if (isSpamLike(normalizedData) || value.website) {
      console.log('üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∫–∞–∫ —Å–ø–∞–º');
      return res.status(429).json({
        error: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const duplicateCheck = await pool.query(`
      SELECT id, email, phone, created_at 
      FROM crm.clients 
      WHERE email = $1 OR phone = $2
      ORDER BY created_at DESC 
      LIMIT 1
    `, [normalizedData.email, normalizedData.phone]);

    if (duplicateCheck.rows.length > 0) {
      const existing = duplicateCheck.rows[0];
      const timeDiff = Date.now() - new Date(existing.created_at).getTime();
      const hoursDiff = timeDiff / (1000 * 60 * 60);

      // –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, —Å—á–∏—Ç–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–º
      if (hoursDiff < 24) {
        console.log('‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç –∑–∞—è–≤–∫–∏:', existing);
        return res.status(409).json({
          error: '–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
          message: '–ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        });
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const result = await pool.query(`
      INSERT INTO crm.clients (name, email, phone, status, created_at, updated_at)
      VALUES ($1, $2, $3, 'CREATED', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
      RETURNING *
    `, [
      normalizedData.name,
      normalizedData.email,
      normalizedData.phone
    ]);

    const newLead = result.rows[0];

    console.log('‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', {
      id: newLead.id,
      name: newLead.name,
      email: newLead.email
    });



    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.status(201).json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      data: {
        id: newLead.id,
        status: 'created'
      }
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ë–î
    if (error.code === '23505') { // –ù–∞—Ä—É—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      return res.status(409).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        message: '–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.'
      });
    }

    if (error.code === '23502') { // –ù–∞—Ä—É—à–µ–Ω–∏–µ NOT NULL
      return res.status(400).json({
        error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã',
        message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π.'
      });
    }

    // –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.'
    });
  }
});

// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
router.get('/leads/stats', async (req, res) => {
  try {
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total_leads,
        COUNT(CASE WHEN created_at >= CURRENT_DATE THEN 1 END) as today_leads,
        COUNT(CASE WHEN created_at >= CURRENT_DATE - INTERVAL '7 days' THEN 1 END) as week_leads,
        COUNT(CASE WHEN created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) as month_leads
      FROM crm.clients 
      WHERE status = 'CREATED'
    `);

    res.json({
      success: true,
      data: stats.rows[0]
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    });
  }
});

module.exports = router;