// backend/routes/workers.js - API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏
const express = require('express');
const router = express.Router();
const pool = require('../database');
const { requireRole } = require('../middleware/auth');
const {
  validateWorker,
  validateWorkerUpdate,
  validateSearch,
  validateIdParam
} = require('../middleware/validation');
const {
  asyncHandler,
  NotFoundError,
  BusinessLogicError
} = require('../middleware/errorHandler');

// üîî –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢ –°–ï–†–í–ò–°–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
const notificationService = require('../services/notificationService');

/**
 * @swagger
 * /api/workers:
 *   get:
 *     tags: [Workers]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - name: search
 *         in: query
 *         description: –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ –§–ò–û –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
 *         schema:
 *           type: string
 *         example: –ê–Ω–Ω–∞
 *       - name: active_only
 *         in: query
 *         description: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 *         schema:
 *           type: boolean
 *         example: true
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WorkerListResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 *   post:
 *     tags: [Workers]
 *     summary: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 *     description: –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
 *     security:
 *       - BearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/WorkerCreateRequest'
 *     responses:
 *       201:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WorkerResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã)
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ForbiddenError'
 *       409:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/workers/{id}:
 *   get:
 *     tags: [Workers]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ ID
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *     responses:
 *       200:
 *         description: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WorkerResponse'
 *       400:
 *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 *   put:
 *     tags: [Workers]
 *     summary: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 *     description: –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/WorkerUpdateRequest'
 *     responses:
 *       200:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WorkerResponse'
 *       400:
 *         description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã)
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ForbiddenError'
 *       404:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       409:
 *         description: Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 *   delete:
 *     tags: [Workers]
 *     summary: –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 *     description: –£–¥–∞–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *     responses:
 *       200:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 message:
 *                   type: string
 *                   example: –†–∞–±–æ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
 *       400:
 *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ForbiddenError'
 *       404:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       409:
 *         description: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WorkerHasClientsError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/workers/{id}/finances:
 *   get:
 *     tags: [Workers]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *     responses:
 *       200:
 *         description: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WorkerFinancesResponse'
 *       400:
 *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/workers/{id}/stats:
 *   get:
 *     tags: [Workers]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤–∫–ª—é—á–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Ä–∞–±–æ—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
 *     security:
 *       - BearerAuth: []
 *     parameters:
 *       - $ref: '#/components/parameters/IdParam'
 *       - name: period
 *         in: query
 *         description: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 24
 *           default: 12
 *         example: 6
 *     responses:
 *       200:
 *         description: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 data:
 *                   type: object
 *                   properties:
 *                     worker_info:
 *                       type: object
 *                       properties:
 *                         id:
 *                           type: integer
 *                           example: 1
 *                         full_name:
 *                           type: string
 *                           example: –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞
 *                         position:
 *                           type: string
 *                           example: –ö—É—Ä–∞—Ç–æ—Ä –∫—É—Ä—Å–æ–≤
 *                         is_active:
 *                           type: boolean
 *                           example: true
 *                         hire_date:
 *                           type: string
 *                           format: date
 *                           example: 2023-01-15
 *                         work_experience:
 *                           type: string
 *                           example: 1 –ª–µ—Ç 2 –º–µ—Å.
 *                     general_stats:
 *                       type: object
 *                       properties:
 *                         total_transactions:
 *                           type: integer
 *                           description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 *                           example: 156
 *                         income_transactions:
 *                           type: integer
 *                           description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ö–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 *                           example: 89
 *                         expense_transactions:
 *                           type: integer
 *                           description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 *                           example: 67
 *                         total_income:
 *                           type: number
 *                           format: float
 *                           description: –û–±—â–∏–π –¥–æ—Ö–æ–¥
 *                           example: 450000.00
 *                         total_expenses:
 *                           type: number
 *                           format: float
 *                           description: –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
 *                           example: 125000.00
 *                         net_result:
 *                           type: number
 *                           format: float
 *                           description: –ß–∏—Å—Ç—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–æ—Ö–æ–¥ - —Ä–∞—Å—Ö–æ–¥—ã)
 *                           example: 325000.00
 *                         avg_income:
 *                           type: number
 *                           format: float
 *                           description: –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –æ–ø–µ—Ä–∞—Ü–∏—é
 *                           example: 5056.18
 *                         first_transaction_date:
 *                           type: string
 *                           format: date
 *                           example: 2023-02-01
 *                         last_transaction_date:
 *                           type: string
 *                           format: date
 *                           example: 2024-01-15
 *                     monthly_stats:
 *                       type: array
 *                       description: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
 *                       items:
 *                         type: object
 *                         properties:
 *                           month:
 *                             type: string
 *                             format: date
 *                             example: 2024-01-01T00:00:00.000Z
 *                           transactions:
 *                             type: integer
 *                             example: 15
 *                           income:
 *                             type: number
 *                             format: float
 *                             example: 45000.00
 *                           expenses:
 *                             type: number
 *                             format: float
 *                             example: 12000.00
 *                           net:
 *                             type: number
 *                             format: float
 *                             example: 33000.00
 *                     top_clients:
 *                       type: array
 *                       description: –¢–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ
 *                       items:
 *                         type: object
 *                         properties:
 *                           client_name:
 *                             type: string
 *                             example: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
 *                           transactions:
 *                             type: integer
 *                             example: 8
 *                           total_income:
 *                             type: number
 *                             format: float
 *                             example: 65000.00
 *       400:
 *         description: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationError'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       404:
 *         description: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/NotFoundError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/workers/stats/overview:
 *   get:
 *     tags: [Workers]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, –≤–∫–ª—é—á–∞—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º, –æ—Ç–¥–µ–ª–∞–º –∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/WorkersOverallStatsResponse'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã)
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ForbiddenError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 *
 * /api/workers/permissions:
 *   get:
 *     tags: [Workers]
 *     summary: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤
 *     description: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –∏ –ø—Ä–∞–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/PermissionsResponse'
 *       401:
 *         description: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/UnauthorizedError'
 *       403:
 *         description: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ForbiddenError'
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ApiResponse'
 */

// üõ†Ô∏è –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –†–ê–ë–û–¢–ù–ò–ö–ê–ú–ò

// –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const maskCardNumber = (cardNumber) => {
  if (!cardNumber) return null;
  if (cardNumber.length < 8) return cardNumber;
  return cardNumber.substring(0, 4) + '****' + cardNumber.substring(cardNumber.length - 4);
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–∂–∞ —Ä–∞–±–æ—Ç—ã
const calculateWorkExperience = (hireDate, fireDate = null) => {
  const startDate = new Date(hireDate);
  const endDate = fireDate ? new Date(fireDate) : new Date();

  const diffTime = Math.abs(endDate - startDate);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

  const years = Math.floor(diffDays / 365);
  const months = Math.floor((diffDays % 365) / 30);

  if (years > 0) {
    return `${years} –ª–µ—Ç ${months} –º–µ—Å.`;
  } else {
    return `${months} –º–µ—Å.`;
  }
};

// üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket —Å–æ–±—ã—Ç–∏—è
const emitWorkerEvent = (req, eventType, workerData, changes = {}) => {
  try {
    const webSocketService = req.webSocketService;
    if (webSocketService) {
      switch (eventType) {
        case 'created':
          webSocketService.emitWorkerCreated && webSocketService.emitWorkerCreated(workerData);
          break;
        case 'updated':
          webSocketService.emitWorkerUpdated && webSocketService.emitWorkerUpdated(workerData, changes);
          break;
        case 'deleted':
          webSocketService.emitWorkerDeleted && webSocketService.emitWorkerDeleted(workerData.id, workerData);
          break;
        default:
          console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:', eventType);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  }
};

// ===============================
// üë• –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –†–ê–ë–û–¢–ù–ò–ö–û–í
// ===============================
router.get('/',
  validateSearch,
  asyncHandler(async (req, res) => {
    const { search, active_only } = req.query;

    let query = `
      SELECT 
        w.*,
        COUNT(f.id) as transactions_count,
        COALESCE(SUM(CASE WHEN f.type = 'expense' THEN ABS(f.amount) ELSE 0 END), 0) as total_salary_paid,
        COALESCE(SUM(CASE WHEN f.type = 'income' THEN f.amount ELSE 0 END), 0) as total_income_brought,
        COALESCE(MAX(f.date), NULL) as last_transaction_date
      FROM crm.workers w
      LEFT JOIN crm.finances f ON w.id = f.worker_id
    `;

    let params = [];
    let whereConditions = [];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É –≤ –§–ò–û –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if (search) {
      whereConditions.push(`(w.full_name ILIKE $${params.length + 1} OR w.position ILIKE $${params.length + 1})`);
      params.push(`%${search}%`);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    if (active_only === 'true') {
      whereConditions.push('w.is_active = true');
    }

    if (whereConditions.length > 0) {
      query += ` WHERE ${whereConditions.join(' AND ')}`;
    }

    query += `
      GROUP BY w.id, w.full_name, w.position, w.telegram_username, w.phone, w.bank, 
               w.card_number, w.hire_date, w.fire_date, w.is_active, w.created_at, w.updated_at
      ORDER BY w.created_at DESC
    `;

    const result = await pool.query(query, params);

    // –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç –≤ –æ—Ç–≤–µ—Ç–µ
    const workersWithMaskedCards = result.rows.map(worker => ({
      ...worker,
      masked_card_number: maskCardNumber(worker.card_number),
      work_experience: calculateWorkExperience(worker.hire_date, worker.fire_date),
      card_number: undefined // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
    }));

    console.log(`üë• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: workersWithMaskedCards,
      count: workersWithMaskedCards.length
    });
  })
);

// ===============================
// üë§ –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –†–ê–ë–û–¢–ù–ò–ö–ê
// ===============================
router.get('/:id',
  validateIdParam,
  asyncHandler(async (req, res) => {
    const { id } = req.params;

    const result = await pool.query(`
      SELECT 
        w.*,
        COUNT(f.id) as transactions_count,
        COALESCE(SUM(CASE WHEN f.type = 'expense' THEN ABS(f.amount) ELSE 0 END), 0) as total_salary_paid,
        COALESCE(SUM(CASE WHEN f.type = 'income' THEN f.amount ELSE 0 END), 0) as total_income_brought,
        COALESCE(MAX(f.date), NULL) as last_transaction_date
      FROM crm.workers w
      LEFT JOIN crm.finances f ON w.id = f.worker_id
      WHERE w.id = $1
      GROUP BY w.id, w.full_name, w.position, w.telegram_username, w.phone, w.bank, 
               w.card_number, w.hire_date, w.fire_date, w.is_active, w.created_at, w.updated_at
    `, [id]);

    if (result.rows.length === 0) {
      throw new NotFoundError('–†–∞–±–æ—Ç–Ω–∏–∫');
    }

    const worker = result.rows[0];

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const workerWithExtras = {
      ...worker,
      masked_card_number: maskCardNumber(worker.card_number),
      work_experience: calculateWorkExperience(worker.hire_date, worker.fire_date),
      card_number: undefined // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
    };

    console.log(`üë§ –ü–æ–ª—É—á–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫: ${worker.full_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: workerWithExtras
    });
  })
);

// ===============================
// ‚ûï –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –†–ê–ë–û–¢–ù–ò–ö–ê
// ===============================
router.post('/',
  requireRole(['admin', 'manager']),
  validateWorker,
  asyncHandler(async (req, res) => {
    const {
      full_name,
      position,
      telegram_username,
      phone,
      bank,
      card_number,
      hire_date
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const existingWorker = await pool.query(`
      SELECT id, full_name 
      FROM crm.workers 
      WHERE (phone = $1 AND phone IS NOT NULL) 
         OR (telegram_username = $2 AND telegram_username IS NOT NULL)
    `, [phone, telegram_username]);

    if (existingWorker.rows.length > 0) {
      throw new BusinessLogicError(
        '–†–∞–±–æ—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏–ª–∏ Telegram —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      );
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const result = await pool.query(`
      INSERT INTO crm.workers (
        full_name, position, telegram_username, phone, bank, card_number, hire_date
      ) VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING *
    `, [full_name, position, telegram_username, phone, bank, card_number, hire_date]);

    const newWorker = result.rows[0];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    const workerWithDetails = {
      ...newWorker,
      masked_card_number: maskCardNumber(newWorker.card_number),
      work_experience: calculateWorkExperience(newWorker.hire_date),
      transactions_count: 0,
      total_salary_paid: 0,
      total_income_brought: 0,
      last_transaction_date: null,
      card_number: undefined
    };

    // üîå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ

    // üîå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
    emitWorkerEvent(req, 'created', workerWithDetails);

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫: ${newWorker.full_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.status(201).json({
      success: true,
      data: workerWithDetails,
      message: '–†–∞–±–æ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });
  })
);

// ===============================
// ‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ù–ò–ö–ê
// ===============================
router.put('/:id',
  requireRole(['admin', 'manager']),
  validateIdParam,
  validateWorkerUpdate,
  asyncHandler(async (req, res) => {
    const { id } = req.params;
    const updateData = req.body;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const currentResult = await pool.query('SELECT * FROM crm.workers WHERE id = $1', [id]);

    if (currentResult.rows.length === 0) {
      throw new NotFoundError('–†–∞–±–æ—Ç–Ω–∏–∫');
    }

    const currentWorker = currentResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (updateData.phone || updateData.telegram_username) {
      const existingWorker = await pool.query(`
        SELECT id, full_name 
        FROM crm.workers 
        WHERE id != $1 AND (
          (phone = $2 AND $2 IS NOT NULL) 
          OR (telegram_username = $3 AND $3 IS NOT NULL)
        )
      `, [id, updateData.phone, updateData.telegram_username]);

      if (existingWorker.rows.length > 0) {
        throw new BusinessLogicError(
          '–†–∞–±–æ—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏–ª–∏ Telegram —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        );
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º is_active –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ fire_date
    if (updateData.fire_date !== undefined) {
      updateData.is_active = updateData.fire_date === null;
    }

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateFields = [];
    const updateValues = [];
    let paramIndex = 1;

    Object.keys(updateData).forEach(key => {
      updateFields.push(`${key} = $${paramIndex}`);
      updateValues.push(updateData[key]);
      paramIndex++;
    });

    updateValues.push(id); // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –∫–æ–Ω–µ—Ü –¥–ª—è WHERE clause

    const updateQuery = `
      UPDATE crm.workers 
      SET ${updateFields.join(', ')}, updated_at = CURRENT_TIMESTAMP
      WHERE id = $${paramIndex}
      RETURNING *
    `;

    const result = await pool.query(updateQuery, updateValues);
    const updatedWorker = result.rows[0];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    const workerWithDetails = {
      ...updatedWorker,
      masked_card_number: maskCardNumber(updatedWorker.card_number),
      work_experience: calculateWorkExperience(updatedWorker.hire_date, updatedWorker.fire_date),
      card_number: undefined
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const changes = {};
    Object.keys(updateData).forEach(key => {
      if (currentWorker[key] !== updateData[key]) {
        changes[key] = {
          old: currentWorker[key],
          new: updateData[key]
        };
      }
    });



    // üîå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
    emitWorkerEvent(req, 'updated', workerWithDetails, changes);

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫: ${updatedWorker.full_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: workerWithDetails,
      message: '–†–∞–±–æ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
  })
);

// ===============================
// üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ù–ò–ö–ê
// ===============================
router.delete('/:id',
  requireRole(['admin']),
  validateIdParam,
  asyncHandler(async (req, res) => {
    const { id } = req.params;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const workerResult = await pool.query('SELECT * FROM crm.workers WHERE id = $1', [id]);

    if (workerResult.rows.length === 0) {
      throw new NotFoundError('–†–∞–±–æ—Ç–Ω–∏–∫');
    }

    const worker = workerResult.rows[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const financesResult = await pool.query(
      'SELECT COUNT(*) as count FROM crm.finances WHERE worker_id = $1',
      [id]
    );

    const financesCount = parseInt(financesResult.rows[0].count);

    if (financesCount > 0) {
      throw new BusinessLogicError(
        `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞. –£ –Ω–µ–≥–æ –µ—Å—Ç—å ${financesCount} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.`
      );
    }

    // –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    await pool.query('DELETE FROM crm.workers WHERE id = $1', [id]);



    // üîå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —Å–æ–±—ã—Ç–∏–µ
    emitWorkerEvent(req, 'deleted', { id, ...worker });

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫: ${worker.full_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      message: '–†–∞–±–æ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
  })
);

// ===============================
// üí∞ –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô –†–ê–ë–û–¢–ù–ò–ö–ê
// ===============================
router.get('/:id/finances',
  validateIdParam,
  asyncHandler(async (req, res) => {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const workerCheck = await pool.query('SELECT id, full_name FROM crm.workers WHERE id = $1', [id]);

    if (workerCheck.rows.length === 0) {
      throw new NotFoundError('–†–∞–±–æ—Ç–Ω–∏–∫');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const result = await pool.query(`
      SELECT 
        f.*,
        c.name as client_name,
        cd.name as cash_desk_name
      FROM crm.finances f
      LEFT JOIN crm.clients c ON f.client_id = c.id
      LEFT JOIN crm.cash_desks cd ON f.cash_desk_id = cd.id
      WHERE f.worker_id = $1
      ORDER BY f.date DESC, f.created_at DESC
    `, [id]);

    console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ${workerCheck.rows[0].full_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: result.rows,
      count: result.rows.length,
      worker: workerCheck.rows[0]
    });
  })
);

// ===============================
// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–ë–û–¢–ù–ò–ö–£
// ===============================
router.get('/:id/stats',
  validateIdParam,
  asyncHandler(async (req, res) => {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    const workerCheck = await pool.query('SELECT * FROM crm.workers WHERE id = $1', [id]);

    if (workerCheck.rows.length === 0) {
      throw new NotFoundError('–†–∞–±–æ—Ç–Ω–∏–∫');
    }

    const worker = workerCheck.rows[0];

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsResult = await pool.query(`
      SELECT 
        COUNT(*) as total_transactions,
        COUNT(*) FILTER (WHERE type = 'income') as income_transactions,
        COUNT(*) FILTER (WHERE type = 'expense') as expense_transactions,
        
        COALESCE(SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END), 0) as total_income,
        COALESCE(SUM(CASE WHEN type = 'expense' THEN ABS(amount) ELSE 0 END), 0) as total_expenses,
        
        COALESCE(AVG(CASE WHEN type = 'income' THEN amount END), 0) as avg_income,
        COALESCE(AVG(CASE WHEN type = 'expense' THEN ABS(amount) END), 0) as avg_expense,
        
        COALESCE(MAX(CASE WHEN type = 'income' THEN amount END), 0) as max_income,
        COALESCE(MAX(CASE WHEN type = 'expense' THEN ABS(amount) END), 0) as max_expense,
        
        MIN(date) as first_transaction_date,
        MAX(date) as last_transaction_date
        
      FROM crm.finances 
      WHERE worker_id = $1
    `, [id]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
    const monthlyStatsResult = await pool.query(`
      SELECT 
        DATE_TRUNC('month', date) as month,
        COUNT(*) as transactions,
        COALESCE(SUM(CASE WHEN type = 'income' THEN amount ELSE 0 END), 0) as income,
        COALESCE(SUM(CASE WHEN type = 'expense' THEN ABS(amount) ELSE 0 END), 0) as expenses
      FROM crm.finances 
      WHERE worker_id = $1 
        AND date >= CURRENT_DATE - INTERVAL '12 months'
      GROUP BY DATE_TRUNC('month', date)
      ORDER BY month DESC
    `, [id]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (—Ç–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞)
    const clientStatsResult = await pool.query(`
      SELECT 
        c.name as client_name,
        COUNT(f.*) as transactions,
        COALESCE(SUM(CASE WHEN f.type = 'income' THEN f.amount ELSE 0 END), 0) as total_income
      FROM crm.finances f
      JOIN crm.clients c ON f.client_id = c.id
      WHERE f.worker_id = $1
      GROUP BY c.id, c.name
      ORDER BY total_income DESC
      LIMIT 5
    `, [id]);

    const stats = statsResult.rows[0];

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const workerStats = {
      // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ
      worker_info: {
        id: worker.id,
        full_name: worker.full_name,
        position: worker.position,
        is_active: worker.is_active,
        hire_date: worker.hire_date,
        fire_date: worker.fire_date,
        work_experience: calculateWorkExperience(worker.hire_date, worker.fire_date)
      },

      // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      general_stats: {
        total_transactions: parseInt(stats.total_transactions),
        income_transactions: parseInt(stats.income_transactions),
        expense_transactions: parseInt(stats.expense_transactions),

        total_income: parseFloat(stats.total_income),
        total_expenses: parseFloat(stats.total_expenses),
        net_result: parseFloat(stats.total_income) - parseFloat(stats.total_expenses),

        avg_income: parseFloat(stats.avg_income),
        avg_expense: parseFloat(stats.avg_expense),

        max_income: parseFloat(stats.max_income),
        max_expense: parseFloat(stats.max_expense),

        first_transaction_date: stats.first_transaction_date,
        last_transaction_date: stats.last_transaction_date
      },

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
      monthly_stats: monthlyStatsResult.rows.map(row => ({
        month: row.month,
        transactions: parseInt(row.transactions),
        income: parseFloat(row.income),
        expenses: parseFloat(row.expenses),
        net: parseFloat(row.income) - parseFloat(row.expenses)
      })),

      // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã
      top_clients: clientStatsResult.rows.map(row => ({
        client_name: row.client_name,
        transactions: parseInt(row.transactions),
        total_income: parseFloat(row.total_income)
      }))
    };

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: ${worker.full_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.email}`);

    res.json({
      success: true,
      data: workerStats
    });
  })
);

module.exports = router;