// backend/middleware/validation/utils/schemas.js
const Joi = require('joi');
const { innValidator, konturUrlValidator } = require('./validators');
const { traceDebug, traceError } = require('../../../utils/logger');

// üìã –ë–ê–ó–û–í–ê–Ø –°–•–ï–ú–ê –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–û–í
const documentsSchema = Joi.object({
  // –ò–ù–ù
  inn: Joi.string()
    .pattern(/^\d{10,12}$/)
    .custom(innValidator)
    .optional()
    .messages({
      'string.pattern.base': '–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä',
      'string.empty': '–ò–ù–ù –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
    }),

  // –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  passport: Joi.object({
    serial: Joi.string()
      .pattern(/^\d{4}$/)
      .optional()
      .messages({
        'string.pattern.base': '–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 4 —Ü–∏—Ñ—Ä—ã',
        'string.empty': '–°–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'
      }),

    number: Joi.string()
      .pattern(/^\d{6}$/)
      .optional()
      .messages({
        'string.pattern.base': '–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Ü–∏—Ñ—Ä',
        'string.empty': '–ù–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      })
  })
  .optional()
  .custom((value, helpers) => {
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω passport –æ–±—ä–µ–∫—Ç, —Ç–æ –∏ serial –∏ number –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
    if (value && (value.serial && !value.number || !value.serial && value.number)) {
      return helpers.message('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏ —Å–µ—Ä–∏—é, –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞');
    }
    return value;
  }),

  // –°—Å—ã–ª–∫–∞ –Ω–∞ –ö–æ–Ω—Ç—É—Ä
  konturLink: Joi.string()
    .uri({ scheme: ['https'] })
    .custom(konturUrlValidator)
    .optional()
    .messages({
      'string.uri': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∞–¥—Ä–µ—Å',
      'string.empty': '–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–æ–Ω—Ç—É—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π'
    }),

  // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è)
  updatedAt: Joi.string().isoDate().optional()
}).optional();

// üõ°Ô∏è –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–ê–õ–ò–î–ê–¶–ò–ò
const validate = (schema, property = 'body') => {
  return (req, res, next) => {
    traceDebug(req, `Validation debug: ${property}`, {
      action: 'validation',
      property: property,
      data: req[property]
    });

    const { error, value } = schema.validate(req[property], {
      abortEarly: false,
      stripUnknown: true
    });

    if (error) {
      const errors = error.details.map(detail => ({
        field: detail.path.join('.'),
        message: detail.message
      }));

      traceError(req, 'Validation failed', {
        action: 'validation',
        property: property,
        errors: errors,
        data: req[property]
      });

      return res.status(400).json({
        error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors,
        traceId: req.traceId || 'no-trace-id'
      });
    }

    // –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –æ—á–∏—â–µ–Ω–Ω—ã–µ
    req[property] = value;
    next();
  };
};

module.exports = {
  documentsSchema,
  validate
};