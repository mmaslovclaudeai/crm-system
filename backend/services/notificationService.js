// backend/services/notificationService.js
const EventEmitter = require('events');

class NotificationService extends EventEmitter {
  constructor() {
    super();
    this.setupEventListeners();
  }

  setupEventListeners() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    this.on('client:created', async (data) => {
      console.log('üì¢ Processing new client notification...');
      console.log('üë§ New client created:', data.client.name);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±—É–¥—É—â–µ–º
      // await emailService.notifyNewClient(data.client, data.user);
      // await slackService.notifyNewClient(data.client, data.user);
    });

    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è
    this.on('client:updated', async (data) => {
      console.log('üì¢ Client updated:', data.client.name);
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
    });

    this.on('finance:created', async (data) => {
      console.log('üì¢ Finance operation created:', data.finance.amount);
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    });
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendNotification(notificationData) {
    try {
      console.log('üì® Sending notification:', notificationData);

      const { type, userId, metadata } = notificationData;

      // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      switch (type) {
        case 'client_created':
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
          const pool = require('../database');
          const clientResult = await pool.query('SELECT * FROM crm.clients WHERE id = $1', [metadata.clientId]);
          const fullClient = clientResult.rows[0];

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userResult = await pool.query('SELECT * FROM crm.users WHERE id = $1', [userId]);
          const user = userResult.rows[0];

          if (fullClient && user) {
            this.emit('client:created', {
              client: fullClient,
              user: user
            });
          }
          break;

        case 'client_updated':
          this.emit('client:updated', { client: metadata, user: { id: userId } });
          break;

        case 'finance_created':
          this.emit('finance:created', { finance: metadata, user: { id: userId } });
          break;

        default:
          console.log(`‚ö†Ô∏è Unknown notification type: ${type}`);
          break;
      }

      return true;
    } catch (error) {
      console.error('‚ùå Error in sendNotification:', error);
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Ç–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
  notifyClientCreated(client, user) {
    this.emit('client:created', { client, user });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Ç–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
  notifyClientUpdated(client, user) {
    this.emit('client:updated', { client, user });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–º–∏—Ç–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
  notifyFinanceCreated(finance, user) {
    this.emit('finance:created', { finance, user });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
module.exports = new NotificationService();