// backend/services/kafkaService.js
const { Kafka } = require('kafkajs');
const { info, error, kafka } = require('../utils/logger');

class KafkaService {
  constructor() {
    this.kafka = new Kafka({
      clientId: 'crm-backend',
      brokers: (process.env.KAFKA_BROKERS || 'kafka:29092').split(','),
    });

    this.producer = this.kafka.producer();
    this.isConnected = false;
  }

  async connect() {
    if (!this.isConnected) {
      try {
        await this.producer.connect();
        this.isConnected = true;
        info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', {
          action: 'kafka_connection',
          status: 'success',
          brokers: this.kafka.brokers
        });
      } catch (error) {
        error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka', {
          action: 'kafka_connection',
          status: 'failed',
          error: error.message,
          brokers: this.kafka.brokers
        });
        throw error;
      }
    }
  }

  async disconnect() {
    if (this.isConnected) {
      try {
        await this.producer.disconnect();
        this.isConnected = false;
        info('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Kafka', {
          action: 'kafka_disconnection',
          status: 'success'
        });
      } catch (error) {
        error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Kafka', {
          action: 'kafka_disconnection',
          status: 'failed',
          error: error.message
        });
      }
    }
  }

  async sendMessage(topic, message) {
    try {
      await this.connect();
      
      await this.producer.send({
        topic,
        messages: [
          {
            value: JSON.stringify(message),
            timestamp: Date.now(),
          },
        ],
      });

      info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka', {
        action: 'kafka_message_sent',
        status: 'success',
        topic: topic,
        messageType: message.event_type,
        clientId: message.data?.client_id
      });
    } catch (error) {
      error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka', {
        action: 'kafka_message_sent',
        status: 'failed',
        topic: topic,
        messageType: message.event_type,
        error: error.message
      });
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  async sendClientStatusMessage(client, oldStatus = null) {
    const message = {
      event_type: 'client_status_changed',
      timestamp: new Date().toISOString(),
      data: {
        client_id: client.id,
        full_name: client.full_name,
        email: client.email,
        phone: client.phone,
        old_status: oldStatus,
        new_status: client.status,
        updated_at: client.updated_at || new Date().toISOString(),
      },
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π —Ç–æ–ø–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    const acceptedStatuses = ['CREATED', 'IN_PROGRESS', 'PAYING_OFFER'];
    const topic = acceptedStatuses.includes(client.status) 
      ? 'crm-msgAccepted' 
      : 'crm-msgError';

    await this.sendMessage(topic, message);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
  async sendClientCreatedMessage(client) {
    const message = {
      event_type: 'client_created',
      timestamp: new Date().toISOString(),
      data: {
        client_id: client.id,
        full_name: client.full_name,
        email: client.email,
        phone: client.phone,
        status: client.status,
        created_at: client.created_at || new Date().toISOString(),
      },
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    const acceptedStatuses = ['CREATED', 'IN_PROGRESS', 'PAYING_OFFER'];
    const topic = acceptedStatuses.includes(client.status) 
      ? 'crm-msgAccepted' 
      : 'crm-msgError';

    await this.sendMessage(topic, message);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const kafkaService = new KafkaService();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Kafka...');
  await kafkaService.disconnect();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Kafka...');
  await kafkaService.disconnect();
  process.exit(0);
});

module.exports = kafkaService;
