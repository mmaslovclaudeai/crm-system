// src/services/clientNotesService.js
import { apiService } from './api';

export const clientNotesService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
  async getClientNotes(clientId, options = {}) {
    const { limit = 50, offset = 0 } = options;
    const params = new URLSearchParams({
      limit: limit.toString(),
      offset: offset.toString()
    });

    console.log(`üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ ID: ${clientId}`);
    try {
      const result = await apiService.get(`/clients/${clientId}/notes?${params}`);
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${result?.length || 0}`);
      return result || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫:', error);
      throw error;
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
  async createNote(clientId, noteData) {
    console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ID: ${clientId}`, noteData);

    if (!noteData.content || !noteData.content.trim()) {
      throw new Error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    try {
      const result = await apiService.post(`/clients/${clientId}/notes`, {
        content: noteData.content.trim()
      });
      console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  async updateNote(noteId, noteData) {
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ID: ${noteId}`, noteData);

    if (!noteData.content || !noteData.content.trim()) {
      throw new Error('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    try {
      const result = await apiService.put(`/notes/${noteId}`, {
        content: noteData.content.trim()
      });
      console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
      throw error;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  async deleteNote(noteId) {
    console.log(`üìù –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ ID: ${noteId}`);

    try {
      const result = await apiService.delete(`/notes/${noteId}`);
      console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞
  async getClientNotesStats(clientId) {
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–µ—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ ID: ${clientId}`);

    try {
      const result = await apiService.get(`/clients/${clientId}/notes/stats`);
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–º–µ—Ç–æ–∫:', error);
      throw error;
    }
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  validateNoteData(noteData) {
    const errors = {};

    if (!noteData.content || !noteData.content.trim()) {
      errors.content = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    if (noteData.content && noteData.content.length > 10000) {
      errors.content = '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10000 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    return {
      isValid: Object.keys(errors).length === 0,
      errors
    };
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  formatNoteForDisplay(note) {
    return {
      id: note.id,
      content: note.content || '',
      authorId: note.author_id,
      authorName: note.author_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
      createdAt: note.created_at,
      updatedAt: note.updated_at,
      isEdited: note.updated_at && note.updated_at !== note.created_at
    };
  },

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
  prepareNoteDataForAPI(formData) {
    return {
      content: formData.content?.trim() || ''
    };
  }
};