// src/services/financesService.js
import { apiService } from './api';

export const financesService = {
  // üí∞ –ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–ù–ê–ù–°–û–í–´–• –û–ü–ï–†–ê–¶–ò–ô –° –†–ê–°–®–ò–†–ï–ù–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô
  async getFinances(filters = {}) {
    const params = new URLSearchParams();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (filters.search) {
      params.append('search', filters.search);
    }

    if (filters.status) {
      params.append('status', filters.status);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
    if (filters.date_from) {
      params.append('date_from', filters.date_from);
    }

    if (filters.date_to) {
      params.append('date_to', filters.date_to);
    }

    // üÜï –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò
    if (filters.cash_desk_id) {
      params.append('cash_desk_id', filters.cash_desk_id);
    }

    if (filters.client_search) {
      params.append('client_search', filters.client_search);
    }

    if (filters.worker_search) {
      params.append('worker_search', filters.worker_search);
    }

    if (filters.category) {
      params.append('category', filters.category);
    }

    if (filters.description) {
      params.append('description', filters.description);
    }

    const queryString = params.toString();
    const endpoint = queryString ? `/finances?${queryString}` : '/finances';

    console.log('üîç –ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);

    return apiService.get(endpoint);
  },

  // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –° –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô –ü–û –î–ê–¢–ê–ú
  async getFinanceSummary(filters = {}) {
    const params = new URLSearchParams();

    // üÜï –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    if (filters.date_from) {
      params.append('date_from', filters.date_from);
    }

    if (filters.date_to) {
      params.append('date_to', filters.date_to);
    }

    const queryString = params.toString();
    const endpoint = queryString ? `/finances/summary/stats?${queryString}` : '/finances/summary/stats';

    console.log('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);

    return apiService.get(endpoint);
  },

  // üí∏ –ü–û–õ–£–ß–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –ü–û –ö–õ–ò–ï–ù–¢–£
  async getClientFinances(clientId) {
    console.log('üí∏ –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:', clientId);
    return apiService.get(`/finances/client/${clientId}`);
  },

  // üí≥ –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –û–ü–ï–†–ê–¶–ò–ò
  async createFinance(financeData) {
    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', financeData);
    return apiService.post('/finances', financeData);
  },

  // üîÑ –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–ï–í–û–î–ê –ú–ï–ñ–î–£ –ö–ê–°–°
  async createTransfer(transferData) {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ transfer –ø–∞—Ä—ã:', transferData);
    return apiService.post('/finances/transfer', transferData);
  },

  // üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò
  async updateFinance(id, financeData) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', { id, financeData });
    return apiService.put(`/finances/${id}`, financeData);
  },

  // üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò
  async deleteFinance(id) {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', id);
    return apiService.delete(`/finances/${id}`);
  },

  // üìà –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ô –û–ü–ï–†–ê–¶–ò–ò
  async getFinanceById(id) {
    console.log('üìà –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ ID:', id);
    return apiService.get(`/finances/${id}`);
  },

  // üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–¢–ê–ú–ò

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è API (YYYY-MM-DD)
  formatDateForAPI(date) {
    if (!date) return null;

    if (typeof date === 'string') {
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
      if (date.includes('.')) {
        const [day, month, year] = date.split('.');
        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
      }
      return date;
    }

    if (date instanceof Date) {
      return date.toISOString().split('T')[0];
    }

    return null;
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  getFirstDayOfCurrentMonth() {
    const now = new Date();
    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);
    return this.formatDateForAPI(firstDay);
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
  getCurrentDate() {
    return this.formatDateForAPI(new Date());
  },

  // üéØ –ì–û–¢–û–í–´–ï –§–ò–õ–¨–¢–†–´ –î–õ–Ø –£–î–û–ë–°–¢–í–ê

  // –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
  async getFinancesForCurrentMonth() {
    const dateFrom = this.getFirstDayOfCurrentMonth();
    const dateTo = this.getCurrentDate();

    return this.getFinances({
      date_from: dateFrom,
      date_to: dateTo
    });
  },

  // –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  async getFinancesForLastWeek() {
    const now = new Date();
    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

    return this.getFinances({
      date_from: this.formatDateForAPI(lastWeek),
      date_to: this.formatDateForAPI(now)
    });
  },

  // –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
  async getFinancesForLastMonth() {
    const now = new Date();
    const lastMonth = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);

    return this.getFinances({
      date_from: this.formatDateForAPI(lastMonth),
      date_to: this.formatDateForAPI(now)
    });
  },

  // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getActualFinancesForPeriod(dateFrom, dateTo) {
    return this.getFinances({
      status: 'actual',
      date_from: this.formatDateForAPI(dateFrom),
      date_to: this.formatDateForAPI(dateTo)
    });
  },

  // –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getPlannedFinancesForPeriod(dateFrom, dateTo) {
    return this.getFinances({
      status: 'planned',
      date_from: this.formatDateForAPI(dateFrom),
      date_to: this.formatDateForAPI(dateTo)
    });
  },

  // üÜï –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –§–ò–ù–ê–ù–°–û–í–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–ò
  async getFinanceAnalytics(params = {}) {
    try {
      const { period = 30, start_date, end_date } = params;
      
      const queryParams = new URLSearchParams();
      queryParams.append('period', period);
      
      if (start_date) queryParams.append('start_date', start_date);
      if (end_date) queryParams.append('end_date', end_date);

      const response = await apiService.get(`/finances/analytics?${queryParams}`);
      return response;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      throw error;
    }
  },

  // üÜï –ú–ï–¢–û–î –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò –ë–ê–õ–ê–ù–°–ê
  async getBalanceHistory(params = {}) {
    try {
      const { period = 30, start_date, end_date } = params;
      
      const queryParams = new URLSearchParams();
      queryParams.append('period', period);
      
      if (start_date) queryParams.append('start_date', start_date);
      if (end_date) queryParams.append('end_date', end_date);

      const response = await apiService.get(`/finances/balance-history?${queryParams}`);
      return response;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      throw error;
    }
  }
};

export default financesService;