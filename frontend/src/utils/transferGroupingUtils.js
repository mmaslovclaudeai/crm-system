// utils/transferGroupingUtils.js

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ –≤ –æ–¥–∏–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂
 * @param {Array} finances - –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * @param {Array} cashDesks - –º–∞—Å—Å–∏–≤ –∫–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π
 * @returns {Array} - –º–∞—Å—Å–∏–≤ —Å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
 */
export const groupTransferPayments = (finances, cashDesks = []) => {
  console.log('üîÑ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', {
    totalFinances: finances.length,
    cashDesksCount: cashDesks.length
  });

  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏
  const transfers = finances.filter(finance =>
    (finance.category === '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å' || finance.category === '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏') &&
    finance.transfer_pair_id
  );

  console.log('üí∏ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', transfers.length);

  // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ID
  const processedIds = new Set();
  const groupedTransfers = [];

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞—Å—Å –ø–æ ID
  const cashDeskMap = cashDesks.reduce((acc, desk) => {
    acc[desk.id] = desk;
    return acc;
  }, {});

  transfers.forEach(transfer => {
    // –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (processedIds.has(transfer.id)) {
      return;
    }

    // –ò—â–µ–º –ø–∞—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    const pairTransfer = transfers.find(t =>
      t.id === transfer.transfer_pair_id &&
      t.transfer_pair_id === transfer.id
    );

    if (pairTransfer) {
      console.log('üë• –ù–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', {
        id1: transfer.id,
        amount1: transfer.amount,
        cashDesk1: transfer.cash_desk_id,
        id2: pairTransfer.id,
        amount2: pairTransfer.amount,
        cashDesk2: pairTransfer.cash_desk_id
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–Ω—ã–π (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π), –∞ –∫–∞–∫–æ–π –ø—Ä–∏—Ö–æ–¥–Ω—ã–π
      const isCurrentNegative = Number(transfer.amount) < 0;
      const negativeTransfer = isCurrentNegative ? transfer : pairTransfer;
      const positiveTransfer = isCurrentNegative ? pairTransfer : transfer;

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Å–∞—Ö - —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –º–∞–ø—ã –ø–æ ID, –ø–æ—Ç–æ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö
      let fromCashDesk = cashDeskMap[negativeTransfer.cash_desk_id];
      let toCashDesk = cashDeskMap[positiveTransfer.cash_desk_id];

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –º–∞–ø–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ API –æ—Ç–≤–µ—Ç–∞
      if (!fromCashDesk && negativeTransfer.cash_desk_name) {
        fromCashDesk = {
          id: negativeTransfer.cash_desk_id,
          name: negativeTransfer.cash_desk_name
        };
      }

      if (!toCashDesk && positiveTransfer.cash_desk_name) {
        toCashDesk = {
          id: positiveTransfer.cash_desk_id,
          name: positiveTransfer.cash_desk_name
        };
      }

      console.log('üè¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Å—Å–∞—Ö:', {
        fromCashDesk: fromCashDesk?.name || '–ù–ï –ù–ê–ô–î–ï–ù–ê',
        toCashDesk: toCashDesk?.name || '–ù–ï –ù–ê–ô–î–ï–ù–ê'
      });

      // –°–æ–∑–¥–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
      const groupedTransfer = {
        id: `transfer_${Math.min(transfer.id, pairTransfer.id)}_${Math.max(transfer.id, pairTransfer.id)}`,
        type: 'transfer',
        category: '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å',
        amount: Math.abs(Number(negativeTransfer.amount)), // –í—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞
        date: negativeTransfer.date, // –ë–µ—Ä–µ–º –¥–∞—Ç—É –∏–∑ —Ä–∞—Å—Ö–æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        status: negativeTransfer.status,
        description: `–ü–µ—Ä–µ–≤–æ–¥ ${Math.abs(Number(negativeTransfer.amount)).toLocaleString('ru-RU')} ‚ÇΩ –∏–∑ ${fromCashDesk?.name || '–ö–∞—Å—Å–∞'} –≤ ${toCashDesk?.name || '–ö–∞—Å—Å–∞'}`,

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ
        from_cash_desk_id: negativeTransfer.cash_desk_id,
        to_cash_desk_id: positiveTransfer.cash_desk_id,
        from_cash_desk: fromCashDesk,
        to_cash_desk: toCashDesk,

        // –ò—Å—Ö–æ–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        original_payments: [negativeTransfer, positiveTransfer],

        // –§–ª–∞–≥ —á—Ç–æ —ç—Ç–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        is_grouped_transfer: true
      };

      groupedTransfers.push(groupedTransfer);

      // –û—Ç–º–µ—á–∞–µ–º –æ–±–∞ ID –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
      processedIds.add(transfer.id);
      processedIds.add(pairTransfer.id);
    }
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, –∏—Å–∫–ª—é—á–∞—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
  const filteredFinances = finances.filter(finance =>
    !((finance.category === '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å' || finance.category === '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏') &&
      finance.transfer_pair_id &&
      processedIds.has(finance.id))
  );

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
  const result = [...filteredFinances, ...groupedTransfers].sort((a, b) => {
    const dateA = new Date(a.date);
    const dateB = new Date(b.date);

    // –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
    if (dateA.getTime() !== dateB.getTime()) {
      return dateB - dateA; // –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å–Ω–∞—á–∞–ª–∞
    }

    // –í—Ç–æ—Ä–∏—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ created_at)
    if (a.created_at && b.created_at) {
      return new Date(b.created_at) - new Date(a.created_at);
    }

    // –¢—Ä–µ—Ç–∏—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ID (–¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
    const idA = typeof a.id === 'string' ? parseInt(a.id.split('_')[1] || '0') : a.id;
    const idB = typeof b.id === 'string' ? parseInt(b.id.split('_')[1] || '0') : b.id;
    return idB - idA;
  });

  console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:', {
    –∏—Å—Ö–æ–¥–Ω—ã—Ö–û–ø–µ—Ä–∞—Ü–∏–π: finances.length,
    –Ω–∞–π–¥–µ–Ω–æ–ü–µ—Ä–µ–≤–æ–¥–æ–≤: transfers.length,
    —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö–ü–µ—Ä–µ–≤–æ–¥–æ–≤: groupedTransfers.length,
    –∏—Ç–æ–≥–æ–≤—ã—Ö–û–ø–µ—Ä–∞—Ü–∏–π: result.length
  });

  return result;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
 * @param {Object} groupedTransfer - —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
 * @returns {Object} - –æ–±—ä–µ–∫—Ç —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
 */
export const getTransferParticipants = (groupedTransfer) => {
  return {
    sender: {
      type: 'cash_desk',
      id: groupedTransfer.from_cash_desk?.id || groupedTransfer.from_cash_desk_id,
      name: groupedTransfer.from_cash_desk?.name || `–ö–∞—Å—Å–∞ #${groupedTransfer.from_cash_desk_id}`,
      icon: 'Wallet'
    },
    recipient: {
      type: 'cash_desk',
      id: groupedTransfer.to_cash_desk?.id || groupedTransfer.to_cash_desk_id,
      name: groupedTransfer.to_cash_desk?.name || `–ö–∞—Å—Å–∞ #${groupedTransfer.to_cash_desk_id}`,
      icon: 'Wallet'
    }
  };
};