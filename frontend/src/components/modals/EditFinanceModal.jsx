import { useState, useEffect } from 'react';
import { X } from 'lucide-react';
import { API_BASE_URL } from '../../constants';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import IncomeExpenseSlider from '../ui/IncomeExpenseSlider';
import ActualPlannedSlider from '../ui/ActualPlannedSlider';
import InputField from '../ui/InputField';
import DropdownField from '../ui/DropdownField';
import DatePicker from '../ui/DatePicker';
import ActionButton from '../ui/ActionButton';
import CancelButton from '../ui/CancelButton';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AuthContext –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
import { useAuthContext } from '../../context/AuthContext';

const EditFinanceModal = ({
  isOpen,
  onClose,
  onSuccess,
  onError,
  finance
}) => {
  // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { getAuthHeader } = useAuthContext();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∑–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ –æ–±—ã—á–Ω–∞—è)
  const isSalary = finance?.category === '–ó–∞—Ä–ø–ª–∞—Ç–∞';

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    type: 'income', // income/expense (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
    status: 'actual', // actual/planned
    amount: '',
    category: '',
    email: '',
    employee: '', // —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã (TelegramID)
    cashDesk: '',
    date: new Date().toISOString().split('T')[0],
    description: ''
  });

  const [buttonState, setButtonState] = useState('inactive');
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  // –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –∏–∑ API
  const [cashDeskOptions, setCashDeskOptions] = useState([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    const loadAdditionalData = async () => {
      if (!isOpen || !finance) return;

      console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', finance);
      console.log('üîç client_id:', finance.client_id);
      console.log('üîç worker_id:', finance.worker_id);
      console.log('üîç category:', finance.category);
      
      let clientEmail = '';
      let workerTelegram = '';

      try {
        const authHeaders = await getAuthHeader();
        console.log('üîç Auth headers available:', !!authHeaders.Authorization);

        // –ü–æ–ª—É—á–∞–µ–º email –∫–ª–∏–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å client_id
        if (finance.client_id) {
          console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å ID:', finance.client_id);
          
          if (!authHeaders.Authorization) {
            console.error('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞');
          } else {
            try {
                          const clientResponse = await fetch(`${API_BASE_URL}/clients/${finance.client_id}`, {
              headers: authHeaders
            });
              console.log('üîç Client response status:', clientResponse.status);
              
              if (clientResponse.ok) {
                const clientResult = await clientResponse.json();
                console.log('üîç Client response data:', clientResult);
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ, –∞ –Ω–µ –≤ data
                clientEmail = clientResult.email || '';
                console.log('‚úÖ Email –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω:', clientEmail);
              } else {
                const errorText = await clientResponse.text();
                console.error('‚ùå Client API error:', clientResponse.status, errorText);
              }
            } catch (error) {
              console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å email –∫–ª–∏–µ–Ω—Ç–∞:', error);
            }
          }
        } else {
          console.log('‚ö†Ô∏è client_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ finance');
        }

        // –ü–æ–ª—É—á–∞–µ–º telegram —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å worker_id
        if (finance.worker_id) {
          console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ —Å ID:', finance.worker_id);
          
          if (!authHeaders.Authorization) {
            console.error('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞');
          } else {
            try {
                          const workerResponse = await fetch(`${API_BASE_URL}/workers/${finance.worker_id}`, {
              headers: authHeaders
            });
              console.log('üîç Worker response status:', workerResponse.status);
              
              if (workerResponse.ok) {
                const workerResult = await workerResponse.json();
                console.log('üîç Worker response data:', workerResult);
                // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ, –∞ –Ω–µ –≤ data
                workerTelegram = workerResult.telegram_username || '';
                console.log('‚úÖ Telegram —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω:', workerTelegram);
              } else {
                const errorText = await workerResponse.text();
                console.error('‚ùå Worker API error:', workerResponse.status, errorText);
              }
            } catch (error) {
              console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å telegram —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:', error);
            }
          }
        } else {
          console.log('‚ö†Ô∏è worker_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ finance');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setFormData({
        type: Number(finance.amount) >= 0 ? 'income' : 'expense',
        status: finance.status || 'actual',
        amount: Math.abs(Number(finance.amount)).toString(),
        category: finance.category || '',
        email: clientEmail,
        employee: workerTelegram,
        cashDesk: finance.cash_desk_id?.toString() || finance.cashDeskId?.toString() || '',
        date: finance.date ? finance.date.split('T')[0] : new Date().toISOString().split('T')[0],
        description: finance.description || ''
      });
      
      console.log('‚úÖ –§–æ—Ä–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', {
        email: clientEmail,
        employee: workerTelegram,
        category: finance.category,
        client_id: finance.client_id,
        worker_id: finance.worker_id,
        formData: {
          email: clientEmail,
          employee: workerTelegram
        }
      });
    };

    loadAdditionalData();
  }, [isOpen, finance]); // –£–±—Ä–∞–ª–∏ getAuthHeader –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    const loadCashDesks = async () => {
      try {
        const authHeaders = await getAuthHeader();
        console.log('üîç Auth headers:', authHeaders);

        if (!authHeaders.Authorization) {
          console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–∫–µ–Ω–∞
          setCashDeskOptions([
            { value: '1', label: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞' },
            { value: '2', label: '–ö–∞—Å—Å–∞ ‚Ññ2' },
            { value: '3', label: '–ù–∞–ª–∏—á–Ω—ã–µ' },
            { value: '4', label: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' },
            { value: '5', label: '–û–Ω–ª–∞–π–Ω –∫–∞—Å—Å–∞' },
            { value: '6', label: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Å—Å–∞' }
          ]);
          return;
        }

        const response = await fetch(`${API_BASE_URL}/cash-desks`, {
          method: 'GET',
          headers: authHeaders
        });

        console.log('üîç API response status:', response.status);

        if (response.ok) {
          const cashDesks = await response.json();
          console.log('‚úÖ –ö–∞—Å—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', cashDesks);

          const options = cashDesks.map(desk => ({
            value: desk.id.toString(),
            label: desk.name
          }));
          setCashDeskOptions(options);
        } else {
          const errorText = await response.text();
          console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorText);
          
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (response.status === 403) {
            console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
            // –ù–µ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
          }
          
          throw new Error(`API Error: ${response.status}`);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Å:', error);
        // Fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        setCashDeskOptions([
          { value: '1', label: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞' },
          { value: '2', label: '–ö–∞—Å—Å–∞ ‚Ññ2' },
          { value: '3', label: '–ù–∞–ª–∏—á–Ω—ã–µ' },
          { value: '4', label: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' },
          { value: '5', label: '–û–Ω–ª–∞–π–Ω –∫–∞—Å—Å–∞' },
          { value: '6', label: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Å—Å–∞' }
        ]);
      }
    };

    if (isOpen) {
      loadCashDesks();
    }
  }, [isOpen]); // –£–±—Ä–∞–ª–∏ getAuthHeader –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  useEffect(() => {
    let isFormValid = false;

    if (isSalary) {
      // –î–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω—É–∂–Ω—ã: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∫–∞—Å—Å–∞, —Å—É–º–º–∞, –¥–∞—Ç–∞
      isFormValid = formData.employee &&
                   formData.cashDesk &&
                   formData.amount &&
                   formData.date;
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã: —Å—É–º–º–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∫–∞—Å—Å–∞, –¥–∞—Ç–∞
      isFormValid = formData.amount &&
                   formData.category &&
                   formData.cashDesk &&
                   formData.date;
    }

    if (loading) {
      setButtonState('loading');
    } else if (isFormValid) {
      setButtonState('active');
    } else {
      setButtonState('inactive');
    }
  }, [formData, loading, isSalary]);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.amount || isNaN(formData.amount) || Number(formData.amount) <= 0) {
      newErrors.amount = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
    }

    if (isSalary) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã
      if (!formData.employee.trim()) {
        newErrors.employee = '–£–∫–∞–∂–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞';
      }

      if (!formData.cashDesk) {
        newErrors.cashDesk = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É';
      }
    } else {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (!formData.category.trim()) {
        newErrors.category = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
      }

      if (!formData.cashDesk) {
        newErrors.cashDesk = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É';
      }
    }

    if (!formData.date) {
      newErrors.date = '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (buttonState === 'inactive' || loading) return;

    if (!validateForm()) {
      setButtonState('error');
      setTimeout(() => setButtonState('active'), 2000);
      return;
    }

    try {
      setLoading(true);
      setButtonState('loading');

      const authHeaders = await getAuthHeader();

      // üÜï –ù–û–í–û–ï: –ü–æ–∏—Å–∫ ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      let finalClientId = null;
      let finalWorkerId = null;

      // –ò—â–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω email)
      if (formData.email && formData.email.trim()) {
        console.log('üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email:', formData.email);
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–∫–∞–∑—ã–≤–∞–µ–º filter=email –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ email –ø–æ–ª—é
        const searchUrl = `${API_BASE_URL}/clients?search=${encodeURIComponent(formData.email)}&filter=email`;
        console.log('üîç Search URL:', searchUrl);
        
        try {
          const clientsResponse = await fetch(searchUrl, {
            headers: authHeaders
          });
          
          console.log('üîç Clients search response status:', clientsResponse.status);
          
          if (clientsResponse.ok) {
            const clientsResult = await clientsResponse.json();
            console.log('üîç Clients search result (RAW):', clientsResult);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const clientsData = clientsResult.data || clientsResult;
            console.log('üîç Final clients data array:', clientsData);
            
            if (Array.isArray(clientsData) && clientsData.length > 0) {
              console.log('üîç All found clients:', clientsData.map(c => ({ 
                id: c.id, 
                email: c.email, 
                name: c.name 
              })));
              
              // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ email
              const foundClient = clientsData.find(client => {
                const clientEmail = client.email?.toLowerCase?.();
                const searchEmail = formData.email.toLowerCase();
                console.log('üîç Comparing emails:', { clientEmail, searchEmail, match: clientEmail === searchEmail });
                return clientEmail === searchEmail;
              });
              
              if (foundClient) {
                finalClientId = foundClient.id;
                console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –ø–æ email:', { 
                  email: formData.email, 
                  clientId: finalClientId, 
                  clientName: foundClient.name 
                });
              } else {
                console.log('‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å —Ç–æ—á–Ω—ã–º email –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞');
              }
            } else {
              console.log('‚ö†Ô∏è –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ');
            }
          } else {
            const errorText = await clientsResponse.text();
            console.error('‚ùå Clients search API error:', clientsResponse.status, errorText);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        }
      } else {
        console.log('‚ö†Ô∏è Email –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π:', formData.email);
      }

      // –ò—â–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø–æ telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω employee –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã)
      if (isSalary && formData.employee && formData.employee.trim()) {
        console.log('üîç –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø–æ telegram:', formData.employee);
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–∫–∞–∑—ã–≤–∞–µ–º filter=telegram –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ telegram –ø–æ–ª—é
        const searchUrl = `${API_BASE_URL}/workers?search=${encodeURIComponent(formData.employee)}&filter=telegram`;
        console.log('üîç Worker search URL:', searchUrl);
        
        try {
          const workersResponse = await fetch(searchUrl, {
            headers: authHeaders
          });
          
          console.log('üîç Workers search response status:', workersResponse.status);
          
          if (workersResponse.ok) {
            const workersResult = await workersResponse.json();
            console.log('üîç Workers search result (RAW):', workersResult);
            
            const workersData = workersResult.data || workersResult;
            
            if (Array.isArray(workersData) && workersData.length > 0) {
              console.log('üîç All found workers:', workersData.map(w => ({ 
                id: w.id, 
                telegram_username: w.telegram_username, 
                full_name: w.full_name 
              })));
              
              const foundWorker = workersData.find(worker => {
                if (!worker.telegram_username) return false;
                
                const cleanWorkerTelegram = worker.telegram_username.replace(/^@/, '').toLowerCase();
                const cleanSearchTelegram = formData.employee.replace(/^@/, '').toLowerCase();
                
                console.log('üîç Comparing telegrams:', { 
                  workerTelegram: cleanWorkerTelegram, 
                  searchTelegram: cleanSearchTelegram, 
                  match: cleanWorkerTelegram === cleanSearchTelegram 
                });
                
                return cleanWorkerTelegram === cleanSearchTelegram;
              });
              
              if (foundWorker) {
                finalWorkerId = foundWorker.id;
                console.log('‚úÖ –†–∞–±–æ—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω –ø–æ telegram:', { 
                  employee: formData.employee, 
                  workerId: finalWorkerId,
                  workerName: foundWorker.full_name
                });
              } else {
                console.log('‚ö†Ô∏è –†–∞–±–æ—Ç–Ω–∏–∫ —Å —Ç–æ—á–Ω—ã–º telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞');
              }
            } else {
              console.log('‚ö†Ô∏è –ù–µ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ');
            }
          } else {
            const errorText = await workersResponse.text();
            console.error('‚ùå Workers search API error:', workersResponse.status, errorText);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:', error);
        }
      }

      console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ ID:', { finalClientId, finalWorkerId });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      let submitData = {};

      if (isSalary) {
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        submitData = {
          type: 'expense', // –ó–∞—Ä–ø–ª–∞—Ç–∞ –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Ö–æ–¥
          status: formData.status,
          amount: Math.abs(Number(formData.amount)),
          cash_desk_id: Number(formData.cashDesk),
          cashDeskId: Number(formData.cashDesk), // üîß –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è App.jsx
          date: formData.date,
          description: formData.description,
          category: '–ó–∞—Ä–ø–ª–∞—Ç–∞'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º worker_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
        if (finalWorkerId) {
          submitData.worker_id = finalWorkerId;
          submitData.workerId = finalWorkerId; // üîß –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è App.jsx
          console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω worker_id –≤ –¥–∞–Ω–Ω—ã–µ:', finalWorkerId);
        }
      } else {
        // –û–±—ã—á–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        submitData = {
          type: formData.type,
          status: formData.status,
          amount: Math.abs(Number(formData.amount)),
          category: formData.category,
          cash_desk_id: Number(formData.cashDesk),
          date: formData.date,
          description: formData.description
        };

        // –î–æ–±–∞–≤–ª—è–µ–º client_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
        if (finalClientId) {
          submitData.client_id = finalClientId;
          console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω client_id –≤ –¥–∞–Ω–Ω—ã–µ:', finalClientId);
        }
      }

      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', submitData);
      console.log('üîç submitData.client_id:', submitData.client_id);
      console.log('üîç –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ submitData:', JSON.stringify(submitData, null, 2));

      // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
      await onSuccess?.(submitData);

      setButtonState('success');
      setTimeout(() => {
        handleClose();
      }, 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      setButtonState('error');
      onError?.(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (validateForm()) {
          setButtonState('active');
        } else {
          setButtonState('inactive');
        }
      }, 2000);
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setFormData({
      type: 'income',
      status: 'actual',
      amount: '',
      category: '',
      email: '',
      employee: '',
      cashDesk: '',
      date: new Date().toISOString().split('T')[0],
      description: ''
    });
    setCashDeskOptions([]); // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Å—Å—ã
    setButtonState('inactive');
    setErrors({});
    setLoading(false);
    onClose?.();
  };

  if (!isOpen || !finance) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-3xl shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto">

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200">
          <h2
            className="text-2xl font-semibold text-gray-800"
            style={{ fontFamily: '"Noto Sans Devanagari", sans-serif' }}
          >
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </h2>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 transition-colors p-2"
            disabled={loading}
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª–∫–∏ */}
        <div className="p-8 space-y-8">

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π */}
          {!isSalary && (
            <IncomeExpenseSlider
              value={formData.type}
              onChange={(value) => handleInputChange('type', value)}
              disabled={loading}
            />
          )}

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –§–∞–∫—Ç/–ü–ª–∞–Ω */}
          <ActualPlannedSlider
            value={formData.status}
            onChange={(value) => handleInputChange('status', value)}
            disabled={loading}
          />

          {/* –ü–æ–ª—è –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã */}
          {isSalary ? (
            <>
              <div className="flex justify-center">
                <InputField
                  label="TelegramID"
                  placeholder="@username"
                  value={formData.employee}
                  onChange={(value) => handleInputChange('employee', value)}
                  disabled={loading}
                  error={errors.employee}
                />
              </div>

              <div className="flex justify-center">
                <DropdownField
                  label="–ö–∞—Å—Å–∞"
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É"
                  value={formData.cashDesk}
                  onChange={(value) => handleInputChange('cashDesk', value)}
                  options={cashDeskOptions}
                  disabled={loading}
                  error={errors.cashDesk}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–°—É–º–º–∞"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  type="number"
                  value={formData.amount}
                  onChange={(value) => handleInputChange('amount', value)}
                  disabled={loading}
                  error={errors.amount}
                />
              </div>

              <div className="flex justify-center">
                <DatePicker
                  label="–î–∞—Ç–∞"
                  value={formData.date}
                  onChange={(value) => handleInputChange('date', value)}
                  disabled={loading}
                  error={errors.date}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–û–ø–∏—Å–∞–Ω–∏–µ"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                  value={formData.description}
                  onChange={(value) => handleInputChange('description', value)}
                  disabled={loading}
                  error={errors.description}
                />
              </div>
            </>
          ) : (
            /* –ü–æ–ª—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π */
            <>
              <div className="flex justify-center">
                <InputField
                  label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                  value={formData.category}
                  onChange={(value) => handleInputChange('category', value)}
                  disabled={loading}
                  error={errors.category}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–ü–æ—á—Ç–∞"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É"
                  value={formData.email}
                  onChange={(value) => handleInputChange('email', value)}
                  disabled={loading}
                  error={errors.email}
                />
              </div>

              <div className="flex justify-center">
                <DropdownField
                  label="–ö–∞—Å—Å–∞"
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É"
                  value={formData.cashDesk}
                  onChange={(value) => handleInputChange('cashDesk', value)}
                  options={cashDeskOptions}
                  disabled={loading}
                  error={errors.cashDesk}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–°—É–º–º–∞"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  type="number"
                  value={formData.amount}
                  onChange={(value) => handleInputChange('amount', value)}
                  disabled={loading}
                  error={errors.amount}
                />
              </div>

              <div className="flex justify-center">
                <DatePicker
                  label="–î–∞—Ç–∞"
                  value={formData.date}
                  onChange={(value) => handleInputChange('date', value)}
                  disabled={loading}
                  error={errors.date}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–û–ø–∏—Å–∞–Ω–∏–µ"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                  value={formData.description}
                  onChange={(value) => handleInputChange('description', value)}
                  disabled={loading}
                  error={errors.description}
                />
              </div>
            </>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-center gap-12">
            <CancelButton
              onClick={handleClose}
              disabled={loading}
            />

            <ActionButton
              state={buttonState}
              onClick={handleSubmit}
              text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
              loadingText="–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..."
              successText="–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
              errorText="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
              disabled={loading}
            />
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
          <div className="mt-6 pt-4 border-t border-gray-200">
            <h4 className="text-sm font-medium text-gray-700 mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏:</h4>
            <div className="text-sm text-gray-600 space-y-1">
              <div>ID: {finance.id}</div>
              <div>–°–æ–∑–¥–∞–Ω–∞: {new Date(finance.created_at).toLocaleDateString('ru-RU')}</div>
              {finance.updated_at && finance.updated_at !== finance.created_at && (
                <div>–ò–∑–º–µ–Ω–µ–Ω–∞: {new Date(finance.updated_at).toLocaleDateString('ru-RU')}</div>
              )}
              {finance.cash_desk_name && (
                <div>–¢–µ–∫—É—â–∞—è –∫–∞—Å—Å–∞: {finance.cash_desk_name}</div>
              )}
              {finance.client_name && (
                <div>–¢–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç: {finance.client_name}</div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EditFinanceModal;
