import { useState, useEffect } from 'react';
import { X } from 'lucide-react';
import { API_BASE_URL } from '../../constants';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import IncomeExpenseSlider from '../ui/IncomeExpenseSlider';
import ActualPlannedSlider from '../ui/ActualPlannedSlider';
import IosToggleFirst from '../ui/IosToggleFirst';
import IosToggleSecond from '../ui/IosToggleSecond';
import InputField from '../ui/InputField';
import DropdownField from '../ui/DropdownField';
import DatePicker from '../ui/DatePicker';
import ActionButton from '../ui/ActionButton';
import CancelButton from '../ui/CancelButton';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AuthContext –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
import { useAuthContext } from '../../context/AuthContext';

const AddFinanceModal = ({
  isOpen,
  onClose,
  onSuccess,
  onError
}) => {
  // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { getAuthHeader } = useAuthContext();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    type: 'income', // income/expense
    status: 'actual', // actual/planned
    isTransfer: false,
    isSalary: false,
    amount: '',
    category: '',
    email: '',
    employee: '', // —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã
    cashDesk: '',
    cashDeskFrom: '', // –∫–∞—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    cashDeskTo: '', // –∫–∞—Å—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    date: new Date().toISOString().split('T')[0],
    description: ''
  });

  const [buttonState, setButtonState] = useState('inactive');
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  // –û–ø—Ü–∏–∏ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –∏–∑ API
  const [cashDeskOptions, setCashDeskOptions] = useState([]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    const loadCashDesks = async () => {
      try {
        // üîß –õ–£–ß–®–ï–ï –†–ï–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º AuthContext –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        const authHeaders = await getAuthHeader();
        console.log('üîç Auth headers:', authHeaders);

        if (!authHeaders.Authorization) {
          console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–∫–µ–Ω–∞
          setCashDeskOptions([
            { value: '1', label: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞' },
            { value: '2', label: '–ö–∞—Å—Å–∞ ‚Ññ2' },
            { value: '3', label: '–ù–∞–ª–∏—á–Ω—ã–µ' },
            { value: '4', label: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' },
            { value: '5', label: '–û–Ω–ª–∞–π–Ω –∫–∞—Å—Å–∞' },
            { value: '6', label: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Å—Å–∞' }
          ]);
          return;
        }

        const response = await fetch(`${API_BASE_URL}/cash-desks`, {
          method: 'GET',
          headers: authHeaders
        });

        console.log('üîç API response status:', response.status);

        if (response.ok) {
          const cashDesks = await response.json();
          console.log('‚úÖ –ö–∞—Å—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', cashDesks);

          const options = cashDesks.map(desk => ({
            value: desk.id.toString(),
            label: desk.name
          }));
          setCashDeskOptions(options);
        } else {
          const errorText = await response.text();
          console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, errorText);
          
          // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          if (response.status === 403) {
            console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
            // –ù–µ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
          }
          
          throw new Error(`API Error: ${response.status}`);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Å:', error);
        // Fallback –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        setCashDeskOptions([
          { value: '1', label: '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Å—Å–∞' },
          { value: '2', label: '–ö–∞—Å—Å–∞ ‚Ññ2' },
          { value: '3', label: '–ù–∞–ª–∏—á–Ω—ã–µ' },
          { value: '4', label: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' },
          { value: '5', label: '–û–Ω–ª–∞–π–Ω –∫–∞—Å—Å–∞' },
          { value: '6', label: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–∞—Å—Å–∞' }
        ]);
      }
    };

    if (isOpen) {
      loadCashDesks();
    }
  }, [isOpen]); // –£–±—Ä–∞–ª–∏ getAuthHeader –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  useEffect(() => {
    let isFormValid = false;

    if (formData.isTransfer) {
      // –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ –Ω—É–∂–Ω—ã: –∫–∞—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –∫–∞—Å—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å, —Å—É–º–º–∞, –¥–∞—Ç–∞
      isFormValid = formData.cashDeskFrom &&
                   formData.cashDeskTo &&
                   formData.amount &&
                   formData.date;
    } else if (formData.isSalary) {
      // –î–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω—É–∂–Ω—ã: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∫–∞—Å—Å–∞, —Å—É–º–º–∞, –¥–∞—Ç–∞
      isFormValid = formData.employee &&
                   formData.cashDesk &&
                   formData.amount &&
                   formData.date;
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã: —Å—É–º–º–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∫–∞—Å—Å–∞, –¥–∞—Ç–∞
      isFormValid = formData.amount &&
                   formData.category &&
                   formData.cashDesk &&
                   formData.date;
    }

    if (loading) {
      setButtonState('loading');
    } else if (isFormValid) {
      setButtonState('active');
    } else {
      setButtonState('inactive');
    }
  }, [formData, loading]);

  const handleInputChange = (field, value) => {
    // –í–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π
    if (field === 'isTransfer' && value === true) {
      setFormData(prev => ({
        ...prev,
        [field]: value,
        isSalary: false // –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
      }));
    } else if (field === 'isSalary' && value === true) {
      setFormData(prev => ({
        ...prev,
        [field]: value,
        isTransfer: false // –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã
      }));
    } else {
      setFormData(prev => ({ ...prev, [field]: value }));
    }

    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.amount || isNaN(formData.amount) || Number(formData.amount) <= 0) {
      newErrors.amount = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É';
    }

    if (formData.isTransfer) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏
      if (!formData.cashDeskFrom) {
        newErrors.cashDeskFrom = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è';
      }

      if (!formData.cashDeskTo) {
        newErrors.cashDeskTo = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è';
      }

      if (formData.cashDeskFrom === formData.cashDeskTo && formData.cashDeskFrom) {
        newErrors.cashDeskTo = '–ö–∞—Å—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–Ω–∞ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∫–∞—Å—Å—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è';
      }
    } else if (formData.isSalary) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã
      if (!formData.employee.trim()) {
        newErrors.employee = '–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞';
      }

      if (!formData.cashDesk) {
        newErrors.cashDesk = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É';
      }
    } else {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (!formData.category.trim()) {
        newErrors.category = '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
      }

      if (!formData.cashDesk) {
        newErrors.cashDesk = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É';
      }
    }

    if (!formData.date) {
      newErrors.date = '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }

    // –û–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - —É–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (buttonState === 'inactive' || loading) return;

    if (!validateForm()) {
      setButtonState('error');
      setTimeout(() => setButtonState('active'), 2000);
      return;
    }

    try {
      setLoading(true);
      setButtonState('loading');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      let submitData = {};

      if (formData.isTransfer) {
        // üÜï –ù–û–í–´–ï –î–ê–ù–ù–´–ï: –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/finances/transfer
        submitData = {
          isTransfer: true, // —Ñ–ª–∞–≥ –¥–ª—è App.jsx —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —á—Ç–æ —ç—Ç–æ transfer
          amount: Math.abs(Number(formData.amount)),
          cashDeskFromId: Number(formData.cashDeskFrom), // –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ ID
          cashDeskToId: Number(formData.cashDeskTo),
          date: formData.date,
          description: formData.description || '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏'
        };
      } else if (formData.isSalary) {
        // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        submitData = {
          type: 'expense',
          status: formData.status,
          amount: Math.abs(Number(formData.amount)),
          employee: formData.employee,
          cash_desk_id: Number(formData.cashDesk),
          date: formData.date,
          description: formData.description,
          category: '–ó–∞—Ä–ø–ª–∞—Ç–∞'
        };
      } else {
        // –û–±—ã—á–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        submitData = {
          type: formData.type,
          status: formData.status,
          amount: Math.abs(Number(formData.amount)),
          category: formData.category,
          cash_desk_id: Number(formData.cashDesk),
          date: formData.date,
          description: formData.description
        };

        // –î–æ–±–∞–≤–ª—è–µ–º email —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
        if (formData.email && formData.email.trim()) {
          submitData.email = formData.email.trim();
        }
      }

      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', submitData);

      // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É
      await onSuccess?.(submitData);

      setButtonState('success');
      setTimeout(() => {
        handleClose();
      }, 1000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      setButtonState('error');
      onError?.(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        if (validateForm()) {
          setButtonState('active');
        } else {
          setButtonState('inactive');
        }
      }, 2000);
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setFormData({
      type: 'income',
      status: 'actual',
      isTransfer: false,
      isSalary: false,
      amount: '',
      category: '',
      email: '',
      employee: '',
      cashDesk: '',
      cashDeskFrom: '',
      cashDeskTo: '',
      date: new Date().toISOString().split('T')[0],
      description: ''
    });
    setCashDeskOptions([]); // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Å—Å—ã
    setButtonState('inactive');
    setErrors({});
    setLoading(false);
    onClose?.();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-3xl shadow-xl w-450 max-w-5xl max-h-[90vh] overflow-y-auto">

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b border-gray-200">
          <h2
            className="text-2xl font-semibold text-gray-800"
            style={{ fontFamily: '"Noto Sans Devanagari", sans-serif' }}
          >
            –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
          </h2>
          <button
            onClick={handleClose}
            className="text-gray-400 hover:text-gray-600 transition-colors p-2"
            disabled={loading}
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª–∫–∏ */}
        <div className="p-8 space-y-8">

          {/* iOS Toggles - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –¥—Ä—É–≥ –ø–æ–¥ –¥—Ä—É–≥–æ–º –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ */}
          <div className="flex flex-col gap-4">
            <IosToggleFirst
              value={formData.isTransfer}
              onChange={(value) => handleInputChange('isTransfer', value)}
              disabled={loading}
            />
            <IosToggleSecond
              value={formData.isSalary}
              onChange={(value) => handleInputChange('isSalary', value)}
              disabled={loading}
            />
          </div>

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –î–æ—Ö–æ–¥/–†–∞—Å—Ö–æ–¥ - —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ –ò –ø—Ä–∏ –∑–∞—Ä–ø–ª–∞—Ç–µ */}
          {!formData.isTransfer && !formData.isSalary && (
            <IncomeExpenseSlider
              value={formData.type}
              onChange={(value) => handleInputChange('type', value)}
              disabled={loading}
            />
          )}

          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –§–∞–∫—Ç/–ü–ª–∞–Ω - —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã */}
          {!formData.isTransfer && (
            <ActualPlannedSlider
              value={formData.status}
              onChange={(value) => handleInputChange('status', value)}
              disabled={loading}
            />
          )}

          {/* –ü–æ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ */}
          {formData.isTransfer ? (
            <>
              <div className="flex justify-center">
                <DropdownField
                  label="–ö–∞—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
                  value={formData.cashDeskFrom}
                  onChange={(value) => handleInputChange('cashDeskFrom', value)}
                  options={cashDeskOptions}
                  disabled={loading}
                  error={errors.cashDeskFrom}
                />
              </div>

              <div className="flex justify-center">
                <DropdownField
                  label="–ö–∞—Å—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—å"
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
                  value={formData.cashDeskTo}
                  onChange={(value) => handleInputChange('cashDeskTo', value)}
                  options={cashDeskOptions}
                  disabled={loading}
                  error={errors.cashDeskTo}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–°—É–º–º–∞"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  type="number"
                  value={formData.amount}
                  onChange={(value) => handleInputChange('amount', value)}
                  disabled={loading}
                  error={errors.amount}
                />
              </div>

              <div className="flex justify-center">
                <DatePicker
                  label="–î–∞—Ç–∞"
                  value={formData.date}
                  onChange={(value) => handleInputChange('date', value)}
                  disabled={loading}
                  error={errors.date}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–û–ø–∏—Å–∞–Ω–∏–µ"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"
                  value={formData.description}
                  onChange={(value) => handleInputChange('description', value)}
                  disabled={loading}
                  error={errors.description}
                />
              </div>
            </>
          ) : formData.isSalary ? (
            /* –ü–æ–ª—è –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã */
            <>
              <div className="flex justify-center">
                <InputField
                  label="Telegram ID"
                  placeholder="@username"
                  value={formData.employee}
                  onChange={(value) => handleInputChange('employee', value)}
                  disabled={loading}
                  error={errors.employee}
                />
              </div>

              <div className="flex justify-center">
                <DropdownField
                  label="–ö–∞—Å—Å–∞"
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É"
                  value={formData.cashDesk}
                  onChange={(value) => handleInputChange('cashDesk', value)}
                  options={cashDeskOptions}
                  disabled={loading}
                  error={errors.cashDesk}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–°—É–º–º–∞"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç—ã"
                  type="number"
                  value={formData.amount}
                  onChange={(value) => handleInputChange('amount', value)}
                  disabled={loading}
                  error={errors.amount}
                />
              </div>

              <div className="flex justify-center">
                <DatePicker
                  label="–î–∞—Ç–∞"
                  value={formData.date}
                  onChange={(value) => handleInputChange('date', value)}
                  disabled={loading}
                  error={errors.date}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–û–ø–∏—Å–∞–Ω–∏–µ"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                  value={formData.description}
                  onChange={(value) => handleInputChange('description', value)}
                  disabled={loading}
                  error={errors.description}
                />
              </div>
            </>
          ) : (
            /* –ü–æ–ª—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π */
            <>
              <div className="flex justify-center">
                <InputField
                  label="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                  value={formData.category}
                  onChange={(value) => handleInputChange('category', value)}
                  disabled={loading}
                  error={errors.category}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–ü–æ—á—Ç–∞"
                  placeholder="example@email.ru"
                  value={formData.email}
                  onChange={(value) => handleInputChange('email', value)}
                  disabled={loading}
                  error={errors.email}
                />
              </div>

              <div className="flex justify-center">
                <DropdownField
                  label="–ö–∞—Å—Å–∞"
                  placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Å—Å—É"
                  value={formData.cashDesk}
                  onChange={(value) => handleInputChange('cashDesk', value)}
                  options={cashDeskOptions}
                  disabled={loading}
                  error={errors.cashDesk}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–°—É–º–º–∞"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                  type="number"
                  value={formData.amount}
                  onChange={(value) => handleInputChange('amount', value)}
                  disabled={loading}
                  error={errors.amount}
                />
              </div>

              <div className="flex justify-center">
                <DatePicker
                  label="–î–∞—Ç–∞"
                  value={formData.date}
                  onChange={(value) => handleInputChange('date', value)}
                  disabled={loading}
                  error={errors.date}
                />
              </div>

              <div className="flex justify-center">
                <InputField
                  label="–û–ø–∏—Å–∞–Ω–∏–µ"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
                  value={formData.description}
                  onChange={(value) => handleInputChange('description', value)}
                  disabled={loading}
                  error={errors.description}
                />
              </div>
            </>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex justify-center gap-12">
            <CancelButton
              onClick={handleClose}
              disabled={loading}
            />

            <ActionButton
              state={buttonState}
              onClick={handleSubmit}
              text="–î–æ–±–∞–≤–∏—Ç—å"
              loadingText="–û—Ç–ø—Ä–∞–≤–∫–∞..."
              successText="–£—Å–ø–µ—à–Ω–æ!"
              errorText="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
              disabled={loading}
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddFinanceModal;