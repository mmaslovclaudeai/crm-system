// src/components/tables/ClientsTable.jsx - –í–ï–†–°–ò–Ø –° –ö–ù–û–ü–ö–û–ô –§–ò–õ–¨–¢–†–ê
import { useState, useMemo } from 'react';
import { Users, Target, Plus, User, Loader2, MessageSquare, BookOpen, Users as GroupIcon, ArrowUp, ChevronLeft, ChevronRight, Filter } from 'lucide-react';
import { useAuthContext } from '../../context/AuthContext';
import { CLIENT_STATUS_LABELS, CLIENT_STATUS_COLORS, STATUS_GROUPS } from '../../constants';
import { getRecordTypeName } from '../../utils/statusUtils';
import ClientFilterModal from '../modals/ClientFilterModal';

const ClientsTable = ({
  clients = [],
  loading = false,
  showResults = true,
  onAddClient,
  onEditClient,
  onDeleteClient,
  onClientCardOpen,
  statusGroup = STATUS_GROUPS.ALL
}) => {
  const { canDelete } = useAuthContext();

  // üìÑ –°–û–°–¢–û–Ø–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(20);

  // üîç –°–û–°–¢–û–Ø–ù–ò–ï –§–ò–õ–¨–¢–†–û–í
  const [isFilterModalOpen, setIsFilterModalOpen] = useState(false);
  const [activeFilters, setActiveFilters] = useState({
    name: '',
    nameFilter: 'any',
    telegram: '',
    telegramFilter: 'any',
    phone: '',
    phoneFilter: 'any',
    flow: '',
    direction: '',
    group: '',
    status: ''
  });

  // üîç –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í
  const filteredClients = useMemo(() => {
    return clients.filter(client => {
      // –§–∏–ª—å—Ç—Ä –ø–æ –§–ò–û
      if (activeFilters.name.trim()) {
        const hasName = client.name && client.name.toLowerCase().includes(activeFilters.name.toLowerCase());
        if (!hasName) return false;
      }
      if (activeFilters.nameFilter === 'filled' && (!client.name || !client.name.trim())) return false;
      if (activeFilters.nameFilter === 'empty' && client.name && client.name.trim()) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ –¢–µ–ª–µ–≥—Ä–∞–º
      if (activeFilters.telegram.trim()) {
        const hasTelegram = client.telegram && client.telegram.toLowerCase().includes(activeFilters.telegram.toLowerCase());
        if (!hasTelegram) return false;
      }
      if (activeFilters.telegramFilter === 'filled' && (!client.telegram || !client.telegram.trim())) return false;
      if (activeFilters.telegramFilter === 'empty' && client.telegram && client.telegram.trim()) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
      if (activeFilters.phone.trim()) {
        const hasPhone = client.phone && client.phone.includes(activeFilters.phone);
        if (!hasPhone) return false;
      }
      if (activeFilters.phoneFilter === 'filled' && (!client.phone || !client.phone.trim())) return false;
      if (activeFilters.phoneFilter === 'empty' && client.phone && client.phone.trim()) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Ç–æ–∫—É
      if (activeFilters.flow && client.data?.flow !== activeFilters.flow) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
      if (activeFilters.direction && client.data?.direction !== activeFilters.direction) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ
      if (activeFilters.group && client.data?.group !== activeFilters.group) return false;

      // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (activeFilters.status && client.status !== activeFilters.status) return false;

      return true;
    });
  }, [clients, activeFilters]);

  // üîß –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ç—É—Å–æ–≤
  const getTableConfig = () => {
    switch (statusGroup) {
      case STATUS_GROUPS.LEADS:
        return {
          title: '–°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤',
          addButtonText: '–î–æ–±–∞–≤–∏—Ç—å –ª–∏–¥–∞',
          icon: Target,
          emptyMessage: '–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ª–∏–¥–∞!',
          noResultsMessage: '–õ–∏–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        };
      case STATUS_GROUPS.CLIENTS:
        return {
          title: '–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤',
          addButtonText: '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞',
          icon: Users,
          emptyMessage: '–ö–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!',
          noResultsMessage: '–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        };
      default:
        return {
          title: '–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π',
          addButtonText: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å',
          icon: Users,
          emptyMessage: '–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å!',
          noResultsMessage: '–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        };
    }
  };

  const config = getTableConfig();
  const IconComponent = config.icon;

  // üìÑ –†–ê–°–ß–ï–¢–´ –î–õ–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
  const totalItems = filteredClients.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const currentClients = filteredClients.slice(startIndex, endIndex);

  // üìÑ –§–£–ù–ö–¶–ò–ò –ü–ê–ì–ò–ù–ê–¶–ò–ò
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleItemsPerPageChange = (newItemsPerPage) => {
    setItemsPerPage(newItemsPerPage);
    setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  };

  const getPaginationRange = () => {
    const delta = 2; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π
    const range = [];
    const rangeWithDots = [];

    for (let i = Math.max(2, currentPage - delta); i <= Math.min(totalPages - 1, currentPage + delta); i++) {
      range.push(i);
    }

    if (currentPage - delta > 2) {
      rangeWithDots.push(1, '...');
    } else {
      rangeWithDots.push(1);
    }

    rangeWithDots.push(...range);

    if (currentPage + delta < totalPages - 1) {
      rangeWithDots.push('...', totalPages);
    } else {
      if (totalPages > 1) {
        rangeWithDots.push(totalPages);
      }
    }

    return rangeWithDots;
  };

  // üìÑ –°–ë–†–û–° –ü–ê–ì–ò–ù–ê–¶–ò–ò –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –ö–õ–ò–ï–ù–¢–û–í
  useState(() => {
    if (currentPage > totalPages && totalPages > 0) {
      setCurrentPage(1);
    }
  }, [filteredClients.length, itemsPerPage]);

  // üîç –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –§–ò–õ–¨–¢–†–û–í
  const handleOpenFilterModal = () => {
    setIsFilterModalOpen(true);
  };

  const handleCloseFilterModal = () => {
    setIsFilterModalOpen(false);
  };

  const handleApplyFilters = (newFilters) => {
    setActiveFilters(newFilters);
    setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  };

  // üîß –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
  const handleDelete = async (e, client) => {
    e.stopPropagation();
    const recordType = getRecordTypeName(client.status);
    console.log(`üóëÔ∏è ClientsTable.handleDelete –≤—ã–∑–≤–∞–Ω —Å ${recordType.toLowerCase()}:`, client);

    if (onDeleteClient) {
      await onDeleteClient(client.id);
    }
  };

  const handleEdit = (e, client) => {
    e.stopPropagation();
    if (onEditClient) {
      onEditClient(client);
    }
  };

  const handleRowClick = (client) => {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    window.open(`/client/${client.id}`, '_blank');
  };

  // üé® –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ò–õ–ò–ó–ê–¶–ò–ò
  const getStatusLabel = (status) => {
    return CLIENT_STATUS_LABELS[status] || status;
  };

  const getStatusColor = (status) => {
    return CLIENT_STATUS_COLORS[status] || 'bg-gray-100 text-gray-800';
  };

  // üéØ –§–£–ù–ö–¶–ò–ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó CLIENT
  const getEducationData = (client) => {
    return {
      flow: client.data?.flow || '‚Äî',
      direction: client.data?.direction || '‚Äî',
      group: client.data?.group || '‚Äî'
    };
  };

  const getDirectionBadgeColor = (direction) => {
    switch (direction) {
      case 'QA':
        return 'bg-blue-100 text-blue-800';
      case 'AQA':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-500';
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-sm">
      {/* –ó–ê–ì–û–õ–û–í–û–ö –° –ö–ù–û–ü–ö–ê–ú–ò */}
      <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <IconComponent className="w-5 h-5 text-gray-600" />
          <h2 className="text-lg font-medium text-gray-900">{config.title}</h2>
          {showResults && totalItems > 0 && (
            <span className="text-sm text-gray-500">
              ({totalItems} {totalItems === 1 ? '–∑–∞–ø–∏—Å—å' : totalItems < 5 ? '–∑–∞–ø–∏—Å–∏' : '–∑–∞–ø–∏—Å–µ–π'})
            </span>
          )}
        </div>

        {/* –ö–ù–û–ü–ö–ò */}
        <div className="flex items-center space-x-3">
          {/* –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ */}
          <button
            onClick={handleOpenFilterModal}
            className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center space-x-2 transition-colors"
          >
            <Filter className="w-4 h-4" />
            <span></span>
          </button>

          {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
          <button
            onClick={onAddClient}
            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2 transition-colors"
          >
            <Plus className="w-4 h-4" />
            <span>{config.addButtonText}</span>
          </button>
        </div>
      </div>

      {/* –ö–û–ù–¢–ï–ù–¢ */}
      {loading ? (
        <div className="p-12 text-center text-gray-500">
          <Loader2 className="w-12 h-12 mx-auto mb-4 text-gray-300 animate-spin" />
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      ) : filteredClients.length === 0 ? (
        <div className="p-12 text-center text-gray-500">
          <IconComponent className="w-12 h-12 mx-auto mb-4 text-gray-300" />
          <p className="text-lg font-medium text-gray-900 mb-2">
            {clients.length === 0 ? config.emptyMessage : config.noResultsMessage}
          </p>
          {clients.length === 0 && (
            <p className="text-sm">
              –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "{config.addButtonText}" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏.
            </p>
          )}
          {clients.length > 0 && filteredClients.length === 0 && (
            <p className="text-sm">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
            </p>
          )}
        </div>
      ) : (
        <>
          {/* –°–ï–õ–ï–ö–¢–û–† –ö–û–õ–ò–ß–ï–°–¢–í–ê –ó–ê–ü–ò–°–ï–ô –ù–ê –°–¢–†–ê–ù–ò–¶–ï */}
          <div className="px-6 py-3 bg-gray-50 border-b border-gray-200 flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <span className="text-sm text-gray-600">–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ:</span>
              <div className="flex space-x-1">
                {[10, 20, 40].map((count) => (
                  <button
                    key={count}
                    onClick={() => handleItemsPerPageChange(count)}
                    className={`px-3 py-1 text-sm rounded transition-colors ${
                      itemsPerPage === count
                        ? 'bg-blue-100 text-blue-700 font-medium'
                        : 'text-gray-600 hover:bg-gray-100'
                    }`}
                  >
                    {count}
                  </button>
                ))}
              </div>
            </div>
            <div className="text-sm text-gray-600">
              –ü–æ–∫–∞–∑–∞–Ω–æ {startIndex + 1}-{Math.min(endIndex, totalItems)} –∏–∑ {totalItems}
            </div>
          </div>

          {/* –¢–ê–ë–õ–ò–¶–ê */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  {/* –ò–ú–Ø */}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <div className="flex items-center space-x-1">
                      <User className="w-4 h-4" />
                      <span>–ò–º—è</span>
                    </div>
                  </th>

                  {/* –¢–ï–õ–ï–ì–†–ê–ú */}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <div className="flex items-center space-x-1">
                      <MessageSquare className="w-4 h-4" />
                      <span>–¢–µ–ª–µ–≥—Ä–∞–º</span>
                    </div>
                  </th>

                  {/* –¢–ï–õ–ï–§–û–ù */}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <div className="flex items-center space-x-1">
                      <span>–¢–µ–ª–µ—Ñ–æ–Ω</span>
                    </div>
                  </th>

                  {/* –ü–û–¢–û–ö */}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <div className="flex items-center space-x-1">
                      <ArrowUp className="w-4 h-4" />
                      <span>–ü–æ—Ç–æ–∫</span>
                    </div>
                  </th>

                  {/* –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï */}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <div className="flex items-center space-x-1">
                      <BookOpen className="w-4 h-4" />
                      <span>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</span>
                    </div>
                  </th>

                  {/* –ì–†–£–ü–ü–ê */}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <div className="flex items-center space-x-1">
                      <GroupIcon className="w-4 h-4" />
                      <span>–ì—Ä—É–ø–ø–∞</span>
                    </div>
                  </th>

                  {/* –°–¢–ê–¢–£–° */}
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –°—Ç–∞—Ç—É—Å
                  </th>

                  {/* –î–ï–ô–°–¢–í–ò–Ø */}
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –î–µ–π—Å—Ç–≤–∏—è
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {currentClients.map((client) => {
                  const educationData = getEducationData(client);
                  return (
                    <tr
                      key={client.id}
                      onClick={() => handleRowClick(client)}
                      className="hover:bg-gray-50 cursor-pointer transition-colors"
                    >
                      {/* –ò–ú–Ø */}
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {client.name}
                        </div>
                        <div className="text-xs text-gray-500">
                          ID: {client.id}
                        </div>
                      </td>

                      {/* –¢–ï–õ–ï–ì–†–ê–ú */}
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-blue-800">
                          {client.telegram ? `${client.telegram}` : '‚Äî'}
                        </div>
                      </td>

                      {/* –¢–ï–õ–ï–§–û–ù */}
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {client.phone || '‚Äî'}
                        </div>
                      </td>

                      {/* –ü–û–¢–û–ö */}
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {educationData.flow}
                        </div>
                      </td>

                      {/* –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï */}
                      <td className="px-6 py-4 whitespace-nowrap">
                        {educationData.direction !== '‚Äî' ? (
                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getDirectionBadgeColor(educationData.direction)}`}>
                            {educationData.direction}
                          </span>
                        ) : (
                          <span className="text-sm text-gray-500">‚Äî</span>
                        )}
                      </td>

                      {/* –ì–†–£–ü–ü–ê */}
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {educationData.group}
                        </div>
                      </td>

                      {/* –°–¢–ê–¢–£–° */}
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(client.status)}`}>
                          {getStatusLabel(client.status)}
                        </span>
                      </td>

                      {/* –î–ï–ô–°–¢–í–ò–Ø */}
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          <button
                            onClick={(e) => handleEdit(e, client)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                          >
                            –ò–∑–º–µ–Ω–∏—Ç—å
                          </button>
                          {canDelete && (
                            <button
                              onClick={(e) => handleDelete(e, client)}
                              className="text-red-600 hover:text-red-900 transition-colors"
                              title="–£–¥–∞–ª–∏—Ç—å"
                            >
                              –£–¥–∞–ª–∏—Ç—å
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {/* –ü–ê–ì–ò–ù–ê–¶–ò–Ø */}
          {totalPages > 1 && (
            <div className="px-6 py-4 flex items-center justify-between border-t border-gray-200">
              <div className="flex items-center">
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft className="h-5 w-5" />
                </button>

                <div className="hidden md:flex">
                  {getPaginationRange().map((page, index) => (
                    page === '...' ? (
                      <span key={`dots-${index}`} className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                        ...
                      </span>
                    ) : (
                      <button
                        key={page}
                        onClick={() => handlePageChange(page)}
                        className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                          currentPage === page
                            ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                            : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                        }`}
                      >
                        {page}
                      </button>
                    )
                  ))}
                </div>

                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronRight className="h-5 w-5" />
                </button>
              </div>

              <div className="text-sm text-gray-700">
                –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
              </div>
            </div>
          )}
        </>
      )}

      {/* –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –§–ò–õ–¨–¢–†–û–í */}
      <ClientFilterModal
        isOpen={isFilterModalOpen}
        onClose={handleCloseFilterModal}
        onApplyFilters={handleApplyFilters}
        clients={clients}
        initialFilters={activeFilters}
      />
    </div>
  );
};

export default ClientsTable;