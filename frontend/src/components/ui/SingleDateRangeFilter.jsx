// src/components/SingleDateRangeFilter.jsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
import { useState, useEffect, useRef } from 'react';
import { Calendar, Filter, RotateCcw } from 'lucide-react';

const SingleDateRangeFilter = ({ onApplyFilter, loading = false, initialDateFrom = null, initialDateTo = null }) => {
  const [dateFrom, setDateFrom] = useState('');
  const [dateTo, setDateTo] = useState('');
  const [showCalendar, setShowCalendar] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false);
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [selectingStart, setSelectingStart] = useState(true); // true = –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É, false = –∫–æ–Ω–µ—á–Ω—É—é

  const calendarRef = useRef(null);
  const buttonRef = useRef(null);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  const getCurrentMonthRange = () => {
    const today = new Date();
    const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
    const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);

    return {
      firstDay: formatDateForInput(firstDay),
      lastDay: formatDateForInput(lastDay)
    };
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç
  useEffect(() => {
    if (isInitialized) return;

    if (initialDateFrom && initialDateTo) {
      setDateFrom(formatDateForInput(initialDateFrom));
      setDateTo(formatDateForInput(initialDateTo));
    } else {
      const { firstDay, lastDay } = getCurrentMonthRange();
      setDateFrom(firstDay);
      setDateTo(lastDay);

      setTimeout(() => {
        onApplyFilter({
          date_from: firstDay,
          date_to: lastDay
        });
      }, 100);
    }

    setIsInitialized(true);
  }, [initialDateFrom, initialDateTo, isInitialized, onApplyFilter]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è input[type="date"] (YYYY-MM-DD)
  const formatDateForInput = (date) => {
    if (!date) return '';

    if (typeof date === 'string') {
      if (date.includes('.')) {
        const [day, month, year] = date.split('.');
        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
      }
      if (date.includes('-')) {
        return date;
      }
      return date;
    }

    if (date instanceof Date) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–æ UTC
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }

    return '';
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (DD.MM.YYYY)
  const formatDateForDisplay = (dateString) => {
    if (!dateString) return '';

    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '';

    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();

    return `${day}.${month}.${year}`;
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (calendarRef.current && !calendarRef.current.contains(event.target) &&
          buttonRef.current && !buttonRef.current.contains(event.target)) {
        setShowCalendar(false);
        setSelectingStart(true);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  const handleDateSelect = (selectedDate) => {
    console.log('üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:', selectedDate, '–í—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ:', selectingStart);

    if (selectingStart) {
      // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
      setDateFrom(selectedDate);
      setDateTo(''); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
      setSelectingStart(false); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
    } else {
      // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
      const startDate = new Date(dateFrom);
      const endDate = new Date(selectedDate);

      if (endDate >= startDate) {
        setDateTo(selectedDate);
      } else {
        // –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π, –º–µ–Ω—è–µ–º –∏—Ö –º–µ—Å—Ç–∞–º–∏
        setDateFrom(selectedDate);
        setDateTo(dateFrom);
      }

      setShowCalendar(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      setSelectingStart(true); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const handleCalendarToggle = () => {
    setShowCalendar(!showCalendar);
    setSelectingStart(true); // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
  const navigateMonth = (direction, event) => {
    event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const newMonth = new Date(currentMonth);
    newMonth.setMonth(newMonth.getMonth() + direction);
    setCurrentMonth(newMonth);
  };

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
  const handleApplyFilter = () => {
    if (dateFrom && dateTo) {
      const fromDate = new Date(dateFrom);
      const toDate = new Date(dateTo);

      if (fromDate > toDate) {
        alert('–î–∞—Ç–∞ "–æ—Ç" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–∞—Ç—ã "–¥–æ"');
        return;
      }
    }

    console.log('üìÖ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º:', { dateFrom, dateTo });

    onApplyFilter({
      date_from: dateFrom,
      date_to: dateTo
    });
  };

  // –°–±—Ä–æ—Å –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
  const handleResetFilter = () => {
    const { firstDay, lastDay } = getCurrentMonthRange();
    setDateFrom(firstDay);
    setDateTo(lastDay);
    setCurrentMonth(new Date());

    onApplyFilter({
      date_from: firstDay,
      date_to: lastDay
    });
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const generateCalendar = () => {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();

    const firstDayOfMonth = new Date(year, month, 1);
    const lastDayOfMonth = new Date(year, month + 1, 0);
    const firstDayWeekday = (firstDayOfMonth.getDay() + 6) % 7; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0

    const days = [];
    const monthNames = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];

    // –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü - –ò–°–ü–†–ê–í–õ–ï–ù–û
    const prevMonth = new Date(year, month - 1, 0); // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for (let i = firstDayWeekday; i > 0; i--) {
      const prevDate = new Date(year, month - 1, prevMonth.getDate() - i + 1);
      days.push({
        date: prevDate,
        isCurrentMonth: false,
        day: prevDate.getDate()
      });
    }

    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    for (let day = 1; day <= lastDayOfMonth.getDate(); day++) {
      const date = new Date(year, month, day);
      days.push({
        date,
        isCurrentMonth: true,
        day
      });
    }

    // –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü - –ò–°–ü–†–ê–í–õ–ï–ù–û (–¥–æ 42 –¥–Ω–µ–π)
    const remainingDays = 42 - days.length;
    for (let day = 1; day <= remainingDays; day++) {
      const nextDate = new Date(year, month + 1, day);
      days.push({
        date: nextDate,
        isCurrentMonth: false,
        day: nextDate.getDate()
      });
    }

    return (
      <div className="p-4 w-80">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è */}
        <div className="flex items-center justify-between mb-4">
          <button
            type="button"
            onClick={(e) => navigateMonth(-1, e)}
            className="p-1 hover:bg-gray-100 rounded focus:outline-none"
            tabIndex={-1}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>

          <h3 className="text-sm font-medium">
            {monthNames[month]} {year}
          </h3>

          <button
            type="button"
            onClick={(e) => navigateMonth(1, e)}
            className="p-1 hover:bg-gray-100 rounded focus:outline-none"
            tabIndex={-1}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>

        {/* –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ */}
        <div className="grid grid-cols-7 gap-1 mb-2">
          {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].map(day => (
            <div key={day} className="text-xs text-gray-500 text-center p-2 font-medium">
              {day}
            </div>
          ))}
        </div>

        {/* –î–Ω–∏ –º–µ—Å—è—Ü–∞ */}
        <div className="grid grid-cols-7 gap-1">
          {days.map((dayObj, index) => {
            const dateStr = formatDateForInput(dayObj.date);
            const isFromDate = dateStr === dateFrom;
            const isToDate = dateStr === dateTo;
            const isInRange = dateFrom && dateTo &&
              dateStr >= dateFrom && dateStr <= dateTo;
            const isToday = dateStr === formatDateForInput(new Date());

            return (
              <button
                key={index}
                type="button"
                onClick={(e) => {
                  e.stopPropagation();
                  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å
                  handleDateSelect(dateStr);
                }}
                className={`p-2 text-xs rounded hover:bg-blue-50 transition-colors focus:outline-none ${
                  !dayObj.isCurrentMonth 
                    ? 'text-gray-400 hover:bg-gray-50' // –°–¥–µ–ª–∞–ª–∏ –¥–Ω–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–µ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –∫–ª–∏–∫–∞
                    : isFromDate || isToDate
                    ? 'bg-blue-600 text-white hover:bg-blue-700'
                    : isInRange
                    ? 'bg-blue-100 text-blue-900 hover:bg-blue-200'
                    : isToday
                    ? 'bg-gray-200 text-gray-900 font-medium'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
                tabIndex={-1}
              >
                {dayObj.day}
              </button>
            );
          })}
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        <div className="mt-4 text-xs text-gray-500 text-center">
          {selectingStart
            ? '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞'
            : '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞'
          }
        </div>

        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ */}
        {dateFrom && dateTo && (
          <div className="mt-2 text-xs text-center p-2 bg-blue-50 rounded">
            <strong>–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥:</strong><br/>
            {formatDateForDisplay(dateFrom)} - {formatDateForDisplay(dateTo)}
          </div>
        )}
      </div>
    );
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getDisplayText = () => {
    if (!dateFrom && !dateTo) {
      return '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥';
    }

    if (dateFrom && !dateTo) {
      return `–û—Ç ${formatDateForDisplay(dateFrom)}`;
    }

    if (dateFrom && dateTo) {
      if (dateFrom === dateTo) {
        return formatDateForDisplay(dateFrom);
      }
      return `${formatDateForDisplay(dateFrom)} - ${formatDateForDisplay(dateTo)}`;
    }

    return '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥';
  };

  return (
    <div className="flex flex-wrap items-end gap-4">
      {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ */}
      <div className="relative">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          –ü–µ—Ä–∏–æ–¥:
        </label>
        <button
          ref={buttonRef}
          type="button"
          onClick={handleCalendarToggle}
          className="flex items-center gap-2 px-3 py-2 border border-gray-300 rounded-lg bg-white hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-w-[200px]"
        >
          <Calendar className="w-4 h-4 text-gray-500" />
          <span className="text-sm font-medium">
            {getDisplayText()}
          </span>
          <svg className="w-4 h-4 text-gray-400 ml-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </button>

        {showCalendar && (
          <div
            ref={calendarRef}
            className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded-lg shadow-lg z-20"
            onClick={(e) => e.stopPropagation()}
          >
            {generateCalendar()}
          </div>
        )}
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å */}
      <button
        type="button"
        onClick={handleApplyFilter}
        disabled={loading}
        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium text-sm flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {loading ? (
          <>
            <svg className="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            –ó–∞–≥—Ä—É–∑–∫–∞...
          </>
        ) : (
          <>
            <Filter className="w-4 h-4" />
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </>
        )}
      </button>

      {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ */}
      <button
        type="button"
        onClick={handleResetFilter}
        disabled={loading}
        className="px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors font-medium text-sm flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <RotateCcw className="w-4 h-4" />
        –°–±—Ä–æ—Å–∏—Ç—å
      </button>
    </div>
  );
};

export default SingleDateRangeFilter;