// src/hooks/useClients.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ú–ê–ü–ü–ò–ù–ì–û–ú –ü–û–õ–ï–ô
import { useState, useCallback, useEffect } from 'react';
import { apiService } from '../services/api';
import { STATUS_GROUPS } from '../constants';


export const useClients = () => {
  const [clients, setClients] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showResults, setShowResults] = useState(false);



  // üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤/–ª–∏–¥–æ–≤ —á–µ—Ä–µ–∑ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø —Å—Ç–∞—Ç—É—Å–æ–≤
  const fetchClients = useCallback(async (searchParams = {}) => {
    try {
      setLoading(true);
      const params = new URLSearchParams();

      if (searchParams.search) {
        params.append('search', searchParams.search);
      }

      if (searchParams.filter) {
        params.append('filter', searchParams.filter);
      }

      // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–∞–º —Å—Ç–∞—Ç—É—Å–æ–≤
      if (searchParams.statusGroup) {
        params.append('status_group', searchParams.statusGroup);
      }

      const response = await apiService.get(`/clients?${params.toString()}`);
      setClients(response || []);
      setShowResults(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  // üîß –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –≥—Ä—É–ø–ø–æ–π —Å—Ç–∞—Ç—É—Å–æ–≤
  const searchClients = useCallback(async (searchTerm, searchFilter = 'name', statusGroup = STATUS_GROUPS.ALL) => {
    const searchParams = {};

    if (searchTerm?.trim()) {
      searchParams.search = searchTerm.trim();
      searchParams.filter = searchFilter;
    }

    // üîß –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É —Å—Ç–∞—Ç—É—Å–æ–≤
    if (statusGroup && statusGroup !== STATUS_GROUPS.ALL) {
      searchParams.statusGroup = statusGroup;
    }

    await fetchClients(searchParams);
  }, [fetchClients]);

  // üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ª–∏–¥–æ–≤
  const searchLeads = useCallback(async (searchTerm, searchFilter = 'name') => {
    console.log('üéØ –ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤:', { searchTerm, searchFilter });
    await searchClients(searchTerm, searchFilter, STATUS_GROUPS.LEADS);
  }, [searchClients]);

  // üîß –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const searchActiveClients = useCallback(async (searchTerm, searchFilter = 'name') => {
    console.log('üë• –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:', { searchTerm, searchFilter });
    await searchClients(searchTerm, searchFilter, STATUS_GROUPS.CLIENTS);
  }, [searchClients]);

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º fullName ‚Üí name
  const createClient = useCallback(async (clientData) => {
    try {
      setLoading(true);
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–∞–ø–ø–∏–º fullName –≤ name –¥–ª—è API
      const apiData = {
        ...clientData,
        name: clientData.fullName || clientData.name, // ‚úÖ API –æ–∂–∏–¥–∞–µ—Ç "name"
      };
      
      // üîß –£–î–ê–õ–Ø–ï–ú fullName –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
      if (apiData.fullName) {
        delete apiData.fullName;
      }
      
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API:', apiData);
      
      const response = await apiService.post('/clients', apiData);

      
              setClients(prev => [response, ...prev]);

      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', response);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º fullName ‚Üí name
  const updateClient = useCallback(async (id, clientData) => {
    try {
      setLoading(true);
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–∞–ø–ø–∏–º fullName –≤ name –¥–ª—è API
      const apiData = {
        ...clientData,
        name: clientData.fullName || clientData.name, // ‚úÖ API –æ–∂–∏–¥–∞–µ—Ç "name"
      };
      
      // üîß –£–î–ê–õ–Ø–ï–ú fullName –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (apiData.fullName) {
        delete apiData.fullName;
      }
      
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API:', { id, data: apiData });
      
      const response = await apiService.put(`/clients/${id}`, apiData);

      
              setClients(prev => prev.map(client =>
          client.id === id ? { ...client, ...response } : client
        ));

      console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', response);
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  const deleteClient = useCallback(async (id) => {
    try {
      setLoading(true);
      await apiService.delete(`/clients/${id}`);

      
              setClients(prev => prev.filter(client => client.id !== id));

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
  const getClientById = useCallback(async (id) => {
    try {
      setLoading(true);
      const response = await apiService.get(`/clients/${id}`);
      return response;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);



  // üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–¥–ª—è Kanban)
  const groupClientsByStatus = useCallback((clientsList = clients) => {
    const grouped = {
      CREATED: [],
      DISTRIBUTION: [],
      GIVE_ACCESS: [],
      IN_PROGRESS: [],
      SEARCH_OFFER: [],
      ACCEPT_OFFER: [],
      PAYING_OFFER: [],
      FINISH: []
    };

    clientsList.forEach(client => {
      if (grouped[client.status]) {
        grouped[client.status].push(client);
      }
    });

    return grouped;
  }, [clients]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ —Å—Ç–∞—Ç—É—Å–æ–≤
  const filterClientsByGroup = useCallback((statusGroup, clientsList = clients) => {
    switch (statusGroup) {
      case STATUS_GROUPS.LEADS:
        return clientsList.filter(client =>
          ['CREATED', 'DISTRIBUTION', 'GIVE_ACCESS'].includes(client.status)
        );

      case STATUS_GROUPS.CLIENTS:
        return clientsList.filter(client =>
          ['IN_PROGRESS', 'SEARCH_OFFER', 'ACCEPT_OFFER', 'PAYING_OFFER', 'FINISH'].includes(client.status)
        );

      case STATUS_GROUPS.ALL:
      default:
        return clientsList;
    }
  }, [clients]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getClientsStats = useCallback(() => {
    const leads = filterClientsByGroup(STATUS_GROUPS.LEADS);
    const activeClients = filterClientsByGroup(STATUS_GROUPS.CLIENTS);

    return {
      total: clients.length,
      leads: leads.length,
      clients: activeClients.length,
      byStatus: groupClientsByStatus()
    };
  }, [clients, filterClientsByGroup, groupClientsByStatus]);

  // üîß –ë–´–°–¢–†–´–ï –û–ü–ï–†–ê–¶–ò–ò

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const loadAllClients = useCallback(async () => {
    await fetchClients();
  }, [fetchClients]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –ª–∏–¥–æ–≤
  const loadLeads = useCallback(async () => {
    await searchLeads('');
  }, [searchLeads]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const loadActiveClients = useCallback(async () => {
    await searchActiveClients('');
  }, [searchActiveClients]);

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  const clearResults = useCallback(() => {
    setClients([]);
    setShowResults(false);
  }, []);

  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º
  const updateClientStatus = useCallback(async (clientId, newStatus) => {
    const client = clients.find(c => c.id === clientId);
    if (!client) {
      throw new Error('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º
    const updateData = {
      fullName: client.name, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è —Ñ–æ—Ä–º—ã
      email: client.email,
      phone: client.phone,
      status: newStatus
    };

    return await updateClient(clientId, updateData);
  }, [clients, updateClient]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    clients,
    loading,
    showResults,

    // –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
    fetchClients,
    searchClients,
    searchLeads,
    searchActiveClients,
    loadAllClients,
    loadLeads,
    loadActiveClients,

    // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    createClient,
    updateClient,
    deleteClient,
    getClientById,
    updateClientStatus,

    // –£—Ç–∏–ª–∏—Ç—ã
    groupClientsByStatus,
    filterClientsByGroup,
    getClientsStats,
    clearResults,


  };
};
