// src/App.jsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–†–û–ü–°–ê–ú–ò –î–õ–Ø KANBANBOARD
import { useState, useEffect } from 'react';

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
import { AuthProvider } from './context/AuthContext';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
import { TABS, FINANCE_TABS, STATUS_GROUPS } from './constants';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
import { useToast } from './hooks/useToast';
import { useClients } from './hooks/useClients';
import { useFinances } from './hooks/useFinances';
import { useCashDesks } from './hooks/useCashDesks';
import { useWorkers } from './hooks/useWorkers';


// Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Header from './components/layout/Header';
import Tabs from './components/layout/Tabs';
import SearchBar from './components/layout/SearchBar';

// UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Toast from './components/ui/Toast';
import ProtectedRoute from './components/auth/ProtectedRoute';

// –¢–∞–±–ª–∏—Ü—ã –∏ Kanban
import ClientsTable from './components/tables/ClientsTable';
import FinancesTable from './components/tables/FinancesTable';
import CashDesksTable from './components/tables/CashDesksTable';
import KanbanBoard from './components/kanban/KanbanBoard';
import WorkersTable from './components/tables/WorkersTable';

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
import AddClientModal from './components/modals/AddClientModal';
import EditClientModal from './components/modals/EditClientModal';
import AddFinanceModal from './components/modals/AddFinanceModal';
import EditFinanceModal from './components/modals/EditFinanceModal';
import AddCashDeskModal from './components/modals/AddCashDeskModal';
import EditCashDeskModal from './components/modals/EditCashDeskModal';
import CashDeskTransactionsModal from './components/modals/CashDeskTransactionsModal';
import AddWorkerModal from './components/modals/AddWorkerModal';
import ClientFilterModal from './components/modals/ClientFilterModal';


// –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
import ClientCard from './components/ClientCard';
import WorkerCard from './components/WorkerCard';


// CRM —Ñ–æ—Ä–º–∞
import CrmForm from './components/CrmForm';

// –£—Ç–∏–ª–∏—Ç—ã
import { getRecordTypeName } from './utils/statusUtils';



// –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å URL
const useSimpleRouter = () => {
  const [currentPath, setCurrentPath] = useState(window.location.pathname);

  useEffect(() => {
    const handlePopState = () => {
      setCurrentPath(window.location.pathname);
    };

    window.addEventListener('popstate', handlePopState);
    return () => window.removeEventListener('popstate', handlePopState);
  }, []);

  const navigate = (path) => {
    window.history.pushState({}, '', path);
    setCurrentPath(path);
  };

  const getParams = () => {
    const pathParts = currentPath.split('/');
    if (pathParts[1] === 'client' && pathParts[2]) {
      return { clientId: pathParts[2] };
    }

    // üë• –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–î–ï–†–ñ–ö–£ –†–ê–ë–û–¢–ù–ò–ö–û–í
    if (pathParts[1] === 'worker' && pathParts[2]) {
      return { workerId: pathParts[2] };
    }
    return {};
  };

  return {
    currentPath,
    navigate,
    getParams
  };
};

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CRM
const CRMContent = () => {
  const { currentPath, navigate, getParams } = useSimpleRouter();
  const { clientId, workerId } = getParams();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
  const getCurrentView = () => {
    if (currentPath.startsWith('/client/')) {
      return 'client-card';
    }
    // üë• –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–î–ï–†–ñ–ö–£ –ö–ê–†–¢–û–ß–ö–ò –†–ê–ë–û–¢–ù–ò–ö–ê
    if (currentPath.startsWith('/worker/')) {
      return 'worker-card';
    }
    return 'dashboard';
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  const getCurrentTab = () => {
    if (currentPath === '/crm-form') {
      return 'CRM_FORM';
    }
    if (currentPath === '/leads') {
      return TABS.LEADS;
    }
    if (currentPath === '/finances') {
      return TABS.FINANCES;
    }
    if (currentPath === '/cash-desks') {
      return TABS.CASH_DESKS;
    }
    // üë• –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–î–ï–†–ñ–ö–£ –í–ö–õ–ê–î–ö–ò –†–ê–ë–û–¢–ù–ò–ö–û–í
    if (currentPath === '/workers') {
      return TABS.WORKERS;
    }
    if (currentPath === '/' || currentPath === '/clients') {
      return TABS.CLIENTS;
    }
    return TABS.LEADS;
  };

  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [activeTab, setActiveTab] = useState(getCurrentTab());
  const [activeFinanceSubTab, setActiveFinanceSubTab] = useState(FINANCE_TABS.ACTUAL);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchFilter, setSearchFilter] = useState('name');

  // üÜï –ù–û–í–û–ï: –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Kanban
  const [kanbanSearchTerm, setKanbanSearchTerm] = useState('');

  const currentView = getCurrentView();

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [modals, setModals] = useState({
    addClient: false,
    editClient: false,
    addFinance: false,
    editFinance: false,
    addCashDesk: false,
    editCashDesk: false,
    viewCashDeskTransactions: false,
    addWorker: false

  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const [editingClient, setEditingClient] = useState(null);
  const [editingFinance, setEditingFinance] = useState(null);
  const [editingCashDesk, setEditingCashDesk] = useState(null);
  const [viewingCashDesk, setViewingCashDesk] = useState(null);
  const [editingWorker, setEditingWorker] = useState(null);


  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
  const { toast, showSuccess, showError, hideToast } = useToast();
  const clientsHook = useClients();
  const financesHook = useFinances();
  const cashDesksHook = useCashDesks();
  const workersHook = useWorkers();


  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å URL
  useEffect(() => {
    const newTab = getCurrentTab();
    if (newTab !== activeTab) {
      setActiveTab(newTab);

      // üîß –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê: –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL —Ç–æ–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      setTimeout(() => {
        switch (newTab) {
          case TABS.LEADS:
            clientsHook.searchLeads('');
            break;
          case TABS.CLIENTS:
            clientsHook.searchActiveClients('');
            break;
          case TABS.FINANCES:
            financesHook.loadAllFinances();
            // üîÑ –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Å—Å–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
            cashDesksHook.searchCashDesks('');
            break;
          case TABS.CASH_DESKS:
            cashDesksHook.searchCashDesks('');
            break;
          case TABS.WORKERS:
            workersHook.searchAllWorkers('');
            break;
        }
      }, 100);
    }
  }, [currentPath, activeTab]);

  // üîß –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê: –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const currentTab = getCurrentTab();
    setTimeout(() => {
      switch (currentTab) {
        case TABS.LEADS:
          if (clientsHook.clients.length === 0) {
            clientsHook.searchLeads('');
          }
          break;
        case TABS.CLIENTS:
          if (clientsHook.clients.length === 0) {
            clientsHook.searchActiveClients('');
          }
          break;
        case TABS.FINANCES:
          if (financesHook.finances.length === 0) {
            financesHook.loadAllFinances();
          }
          break;
        case TABS.CASH_DESKS:
          if (cashDesksHook.cashDesks.length === 0) {
            cashDesksHook.searchCashDesks('');
          }
          break;
        case TABS.WORKERS:
          if (workersHook.workers.length === 0) {
            workersHook.searchAllWorkers('');
          }
          break;
      }
    }, 500); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ö—É–∫–æ–≤
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const openModal = (modalName, data = null) => {
    setModals(prev => ({ ...prev, [modalName]: true }));

    switch (modalName) {
      case 'editClient':
        setEditingClient(data);
        break;
      case 'editFinance':
        setEditingFinance(data);
        break;
      case 'editCashDesk':
        setEditingCashDesk(data);
        break;
      case 'viewCashDeskTransactions':
        setViewingCashDesk(data);
        break;
    }
  };

  const closeModal = (modalName) => {
    setModals(prev => ({ ...prev, [modalName]: false }));

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    switch (modalName) {
      case 'editClient':
        setEditingClient(null);
        break;
      case 'editFinance':
        setEditingFinance(null);
        break;
      case 'editCashDesk':
        setEditingCashDesk(null);
        break;
      case 'viewCashDeskTransactions':
        setViewingCashDesk(null);
        break;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∫–ª–∞–¥–æ–∫
  const handleTabChange = (tab) => {
    setActiveTab(tab);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∫–ª–∞–¥–∫–∏
    setSearchTerm('');
    setKanbanSearchTerm('');
    setSearchFilter('name'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–∂–µ

    switch (tab) {
      case TABS.LEADS:
        navigate('/leads');
        // üîß –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        setTimeout(() => {
          clientsHook.searchLeads(''); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ª–∏–¥–æ–≤
        }, 100);
        break;
      case TABS.CLIENTS:
        navigate('/clients');
        // üîß –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        setTimeout(() => {
          clientsHook.searchActiveClients(''); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        }, 100);
        break;
        case TABS.FINANCES:
          navigate('/finances');
          // ‚úÖ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ
          setTimeout(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
            const currentFilters = financesHook.getCurrentFilters();

            if (!currentFilters.date_from && !currentFilters.date_to && financesHook.finances.length === 0) {
              // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
              financesHook.loadCurrentMonthFinances();
            } else if (financesHook.finances.length === 0) {
              // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
              financesHook.applyFilters();
            }
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
          }, 100);
          // üîÑ –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Å—Å–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
          setTimeout(() => {
            cashDesksHook.searchCashDesks('');
          }, 150);
          break;
      case TABS.CASH_DESKS:
        navigate('/cash-desks');
        // üîß –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Å—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        setTimeout(() => {
          cashDesksHook.searchCashDesks(''); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Å—Å—ã
        }, 100);
        break;
      case TABS.WORKERS:
        navigate('/workers');
        setTimeout(() => {
          workersHook.searchAllWorkers('');
        }, 100);

        break;
      default:
        navigate('/');
    }
  };

  const handleFinanceSubTabChange = (newSubTab) => {
    setActiveFinanceSubTab(newSubTab);

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ö—É–∫–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    if (newSubTab === FINANCE_TABS.STATISTICS) {
      // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      financesHook.loadAllFinances();
    } else {
      const status = newSubTab === FINANCE_TABS.ACTUAL ? 'actual' : 'planned';
      financesHook.switchStatus(status);
    }
  };



  // üë• –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–ë–û–¢–ù–ò–ö–û–í
  const handleCreateWorker = async (workerData) => {
    try {
      await workersHook.createWorker(workerData);
      showSuccess('–†–∞–±–æ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: ' + error.message);
    }
  };

  const handleEditWorker = (worker) => {
    navigate(`/worker/${worker.id}`);
  };

  const handleDeleteWorker = async (workerId) => {
    try {
      await workersHook.deleteWorker(workerId);
      showSuccess('–†–∞–±–æ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: ' + error.message);
    }
  };

  const handleViewWorkerStats = (worker) => {
    navigate(`/worker/${worker.id}`);
  };

  const handleViewWorkerFinances = (worker) => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    navigate(`/worker/${worker.id}`);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
  const handleSearch = async () => {
    try {
      switch (activeTab) {
        case TABS.LEADS:
          await clientsHook.searchLeads(searchTerm, searchFilter);
          break;
        case TABS.CLIENTS:
          await clientsHook.searchActiveClients(searchTerm, searchFilter);
          break;
        case TABS.FINANCES:
          await financesHook.searchFinances(searchTerm);
          break;
        case TABS.CASH_DESKS:
          await cashDesksHook.searchCashDesks(searchTerm);
          break;
      }
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + error.message);
    }
  };

  const handleKanbanSearch = async () => {
    try {
      await clientsHook.searchLeads(kanbanSearchTerm, searchFilter);
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Kanban: ' + error.message);
    }
  };

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const handleCreateClient = async (clientData) => {
    try {
      await clientsHook.createClient(clientData);
      closeModal('addClient');
      showSuccess('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ' + error.message);
    }
  };

  const handleUpdateClient = async (id, clientData) => {
    try {
      await clientsHook.updateClient(id, clientData);
      closeModal('editClient');
      showSuccess('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ' + error.message);
    }
  };

  const handleDeleteClient = async (id) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?')) return;

    try {
      await clientsHook.deleteClient(id);
      showSuccess('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: ' + error.message);
    }
  };

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
  const handleCreateFinance = async (financeData) => {
    try {
      if (financeData.isTransfer) {
        // üÜï –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è transfer –ø–∞—Ä
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API:', financeData);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/finances/transfer
        const transferData = {
          amount: Math.abs(Number(financeData.amount)),
          cash_desk_from_id: Number(financeData.cashDeskFromId),
          cash_desk_to_id: Number(financeData.cashDeskToId),
          date: financeData.date,
          description: financeData.description || '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏'
        };

        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è transfer API:', transferData);

        // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        await financesHook.createTransfer(transferData);

        showSuccess('–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –∫–∞—Å—Å–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      } else {
        // üí∞ –û–±—ã—á–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞
        console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', financeData);
        await financesHook.createFinance(financeData);

        if (financeData.employee) {
          showSuccess('–ó–∞—Ä–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–ª–∞—á–µ–Ω–∞');
        } else {
          showSuccess('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        }
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
      closeModal('addFinance');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: ' + error.message);
    }
  };

  const handleUpdateFinance = async (financeData) => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', financeData);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ editingFinance
      const financeId = editingFinance?.id;
      if (!financeId) {
        throw new Error('ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ financeData –∫–∞–∫ –µ—Å—Ç—å
      const apiData = {
        date: financeData.date,
        amount: Math.abs(Number(financeData.amount)),
        type: financeData.type,
        status: financeData.status,
        description: financeData.description || '',
        category: financeData.category,
        cash_desk_id: financeData.cash_desk_id,
        client_id: financeData.client_id, // ‚úÖ –ë–µ—Ä–µ–º –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ fallback –Ω–∞ null
        worker_id: financeData.worker_id  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É worker_id
      };

      // üîß –û–¢–õ–ê–î–ö–ê: –£–¥–∞–ª—è–µ–º undefined –ø–æ–ª—è —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤ API
      Object.keys(apiData).forEach(key => {
        if (apiData[key] === undefined) {
          delete apiData[key];
        }
      });

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API:', apiData);

      await financesHook.updateFinance(financeId, apiData);
      closeModal('editFinance');
      showSuccess('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: ' + error.message);
    }
  };

  const handleEditFinance = (finance) => {
    console.log('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', finance);
    openModal('editFinance', finance);
  };

  const handleDeleteFinance = async (id) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é?')) return;

    try {
      await financesHook.deleteFinance(id);
      showSuccess('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: ' + error.message);
    }
  };

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Å—Å
  const handleCreateCashDesk = async (cashDeskData) => {
    try {
      await cashDesksHook.createCashDesk(cashDeskData);
      closeModal('addCashDesk');
      showSuccess('–ö–∞—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Å—ã: ' + error.message);
    }
  };

  const handleUpdateCashDesk = async (cashDeskData) => {
    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ editingCashDesk
      const cashDeskId = editingCashDesk?.id;
      if (!cashDeskId) {
        throw new Error('ID –∫–∞—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      await cashDesksHook.updateCashDesk(cashDeskId, cashDeskData);
      closeModal('editCashDesk');
      showSuccess('–ö–∞—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Å—Å—ã: ' + error.message);
    }
  };

  const handleDeleteCashDesk = async (id) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Å—Å—É??')) return;

    try {
      await cashDesksHook.deleteCashDesk(id);
      showSuccess('–ö–∞—Å—Å–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Å—Å—ã: ' + error.message);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è Kanban)
  const handleClientStatusChange = async (clientId, newStatus) => {
    try {
      await clientsHook.updateClientStatus(clientId, newStatus);
      showSuccess('–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ' + error.message);
    }
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
  const renderContent = () => {
    // –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    if (currentView === 'worker-card' && workerId) {
      return (
        <WorkerCard
          workerId={parseInt(workerId)}
          onBack={() => navigate('/workers')}
          onEdit={handleEditWorker}
          onDelete={handleDeleteWorker}
          onError={showError}
          onSuccess={showSuccess}
          workersService={workersHook} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
          financesService={financesHook} // –ü–µ—Ä–µ–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        />
      );
    }

        // –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
  if (currentView === 'client-card') {
    return (
        <ClientCard
            clientId={clientId}
            onBack={() => navigate('/')}
            onEdit={(client) => openModal('editClient', client)}
            onDelete={handleDeleteClient}
            onError={showError}
            onSuccess={showSuccess}
        />
    );
  }

    // –û—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è CRM —Ñ–æ—Ä–º—ã
    if (activeTab === 'CRM_FORM') {
      return <CrmForm />;
    }

    return (
        <>
          <Header/>

          <div className="container mx-auto px-4 py-6">
            {/* –¢–∞–±—ã */}
            <Tabs
                activeTab={activeTab}
                onTabChange={handleTabChange}
            />

            {/* –ü–æ–∏—Å–∫ */}


            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            {activeTab === TABS.LEADS && (
                <KanbanBoard
                  leads={clientsHook.clients}
                  loading={clientsHook.loading}
                  onUpdateStatus={handleClientStatusChange}
                  onCardClick={(client) => window.open(`/client/${client.id}`, '_blank')}
                  onAddLead={() => openModal('addClient')}
                  searchTerm={kanbanSearchTerm}
                  onSearch={setKanbanSearchTerm}
                />
            )}

            {activeTab === TABS.CLIENTS && (
                <ClientsTable
                  clients={clientsHook.clients}
                  loading={clientsHook.loading}
                  showResults={true}
                  onEditClient={(client) => openModal('editClient', client)}
                  onDeleteClient={handleDeleteClient}
                  onAddClient={() => openModal('addClient')}
                />
            )}

            {activeTab === TABS.FINANCES && (
              <FinancesTable
                finances={financesHook.finances}
                clients={clientsHook.clients}
                cashDesks={cashDesksHook.cashDesks}
                workers={workersHook.workers}
                financeSummary={financesHook.financeSummary}
                loading={financesHook.loading}
                onAddFinance={() => openModal('addFinance')}
                onEditFinance={handleEditFinance}
                onDeleteFinance={handleDeleteFinance}
                onError={showError}
                activeSubTab={activeFinanceSubTab}
                onSubTabChange={handleFinanceSubTabChange}
                onApplyFilters={financesHook.applyFilters}
              />
            )}

            {activeTab === TABS.CASH_DESKS && (
                <CashDesksTable
                    cashDesks={cashDesksHook.cashDesks}
                    loading={cashDesksHook.loading}
                    showResults={cashDesksHook.showResults}
                    onEditCashDesk={(cashDesk) => openModal('editCashDesk', cashDesk)}
                    onDeleteCashDesk={handleDeleteCashDesk}
                    onAddCashDesk={() => openModal('addCashDesk')}
                    onViewTransactions={(cashDesk) => openModal('viewCashDeskTransactions', cashDesk)}
                />
            )}

            {activeTab === TABS.WORKERS && (
              <>
                <div className="mb-6">
                  <SearchBar
                    searchTerm={searchTerm}
                    onSearchChange={(term) => {
                      setSearchTerm(term);
                      workersHook.searchAllWorkers(term);
                    }}
                    placeholder="–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤..."
                  />
                </div>

                <WorkersTable
                  workers={workersHook.workers}
                  loading={workersHook.loading}
                  searchTerm={searchTerm}
                  onSearchChange={(term) => {
                    setSearchTerm(term);
                    workersHook.searchAllWorkers(term);
                  }}
                  onAddWorker={() => openModal('addWorker')}
                  onEditWorker={handleEditWorker}
                  onDeleteWorker={handleDeleteWorker}
                  onViewWorkerStats={handleViewWorkerStats}
                  onViewWorkerFinances={handleViewWorkerFinances}
                />
              </>
            )}

          </div>

          {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
          <AddClientModal
              isOpen={modals.addClient}
              onClose={() => closeModal('addClient')}
              onSuccess={handleCreateClient}
              onError={showError}
              context={activeTab === TABS.LEADS ? STATUS_GROUPS.LEADS : STATUS_GROUPS.CLIENTS}
          />

          <EditClientModal
              isOpen={modals.editClient}
              client={editingClient}
              onClose={() => closeModal('editClient')}
              onSuccess={handleUpdateClient}
              onError={showError}
          />

          <AddFinanceModal
            isOpen={modals.addFinance}
            onClose={() => closeModal('addFinance')}
            onSuccess={handleCreateFinance}
            onError={showError}
          />

          <EditFinanceModal
              isOpen={modals.editFinance}
              finance={editingFinance}
              onClose={() => closeModal('editFinance')}
              onSuccess={handleUpdateFinance}
              onError={showError}
          />

          <AddCashDeskModal
              isOpen={modals.addCashDesk}
              onClose={() => closeModal('addCashDesk')}
              onSuccess={handleCreateCashDesk}
              onError={showError}
          />

          <EditCashDeskModal
              isOpen={modals.editCashDesk}
              cashDesk={editingCashDesk}
              onClose={() => closeModal('editCashDesk')}
              onSuccess={handleUpdateCashDesk}
              onError={showError}
          />

          <CashDeskTransactionsModal
              isOpen={modals.viewCashDeskTransactions}
              cashDesk={viewingCashDesk}
              onClose={() => closeModal('viewCashDeskTransactions')}
          />

          {/* üë• –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –†–ê–ë–û–¢–ù–ò–ö–û–í */}
          <AddWorkerModal
            isOpen={modals.addWorker}
            onClose={() => closeModal('addWorker')}
            onSubmit={handleCreateWorker}
            loading={workersHook.loading}
          />

          <Toast
            message={toast.message}
            type={toast.type}
            isVisible={toast.isVisible}
            onClose={hideToast}
          />
        </>
    );
  }
  return renderContent();
};

// –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
function App() {
  return (
    <AuthProvider>
      <div className="min-h-screen bg-gray-50">
        <ProtectedRoute>
          <CRMContent />
        </ProtectedRoute>
      </div>
    </AuthProvider>
  );
}

export default App;
